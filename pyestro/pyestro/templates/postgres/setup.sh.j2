#!/bin/bash
# {{project_name}} - PostgreSQL Infrastructure Setup Script
# Generated by Pyestro postgres template

set -euo pipefail

PROJECT_NAME="{{project_name}}"
PRIMARY_DB_IP="{{primary_db_ip}}"
BACKUP_SERVER_IP="{{backup_server_ip}}"
DB_NAME="{{db_name}}"
DB_USER="{{db_user}}"

echo "Setting up {{project_name}} PostgreSQL infrastructure..."

# Check if we're in the right directory
if [[ ! -f "pyestro.json" ]]; then
    echo "Error: pyestro.json not found. Please run this script from the project root."
    exit 1
fi

# Install Python dependencies
echo "Installing Python dependencies..."
if command -v pip3 &> /dev/null; then
    pip3 install --user pyestro ansible psycopg2-binary
elif command -v pip &> /dev/null; then
    pip install --user pyestro ansible psycopg2-binary
else
    echo "Error: pip not found. Please install Python and pip first."
    exit 1
fi

# Validate Pyestro configuration
echo "Validating Pyestro configuration..."
if command -v pyestro &> /dev/null; then
    pyestro config validate
else
    echo "Warning: pyestro command not found in PATH. You may need to add ~/.local/bin to your PATH."
fi

# Setup project structure
echo "Setting up project structure..."
mkdir -p workdir
mkdir -p backups/{full,incremental,logical}
mkdir -p scripts/helpers
mkdir -p ssl

# Initialize git repository if not already initialized
if [[ ! -d ".git" ]]; then
    echo "Initializing git repository..."
    git init
    git add .
    git commit -m "Initial commit: {{project_name}} PostgreSQL infrastructure setup"
fi

# Create PostgreSQL inventory files
echo "Creating PostgreSQL server configurations..."

# Primary database server configuration
cat > inventory/nodes/primary-db.yml << 'EOF'
classes:
  - hardware.server
  - services.postgresql.primary
  - network.database
  - security.database
  - monitoring.postgresql

parameters:
  hostname: primary-db
  ip_address: {{primary_db_ip}}
  
  postgresql:
    version: {{postgresql_version}}
    port: 5432
    max_connections: {{max_connections}}
    shared_buffers: "{{shared_buffers}}"
    effective_cache_size: "1GB"
    maintenance_work_mem: "64MB"
    
    # Database configuration
    databases:
      - name: "{{db_name}}"
        owner: "{{db_user}}"
        encoding: "UTF8"
        
    # User configuration
    users:
      - name: "{{db_user}}"
        password: "{{ vault_{{db_user}}_password }}"
        privileges: "ALL"
        database: "{{db_name}}"
      - name: "replicator"
        password: "{{ vault_replicator_password }}"
        role_attr_flags: "REPLICATION"
        
    {% if enable_ssl == 'y' %}
    # SSL Configuration
    ssl: true
    ssl_cert_file: "/etc/ssl/certs/postgresql.crt"
    ssl_key_file: "/etc/ssl/private/postgresql.key"
    {% endif %}
    
    {% if enable_replication == 'y' %}
    # Replication configuration
    replication:
      enabled: true
      user: "replicator"
      slots:
        - name: "backup_slot"
    {% endif %}
EOF

# Backup server configuration
cat > inventory/nodes/backup-server.yml << 'EOF'
classes:
  - hardware.server
  - services.postgresql.backup
  - network.backup
  - security.backup
  - monitoring.backup

parameters:
  hostname: backup-server
  ip_address: {{backup_server_ip}}
  
  postgresql_backup:
    primary_host: "{{primary_db_ip}}"
    primary_port: 5432
    replication_user: "replicator"
    
    # Backup configuration
    backup_dir: "/var/lib/postgresql/backups"
    wal_archive_dir: "/var/lib/postgresql/wal_archive"
    retention_days: {{backup_retention_days}}
    
    # Backup schedules
    schedules:
      full_backup:
        cron: "0 2 * * 0"    # Weekly at 2 AM Sunday
        retention: 4         # Keep 4 weeks
        
      incremental_backup:
        cron: "0 2 * * 1-6"  # Daily at 2 AM Mon-Sat
        retention: 7         # Keep 7 days
        
      logical_backup:
        cron: "0 4 * * *"    # Daily at 4 AM
        retention: 30        # Keep 30 days
EOF

# Create network configuration
echo "Creating network configuration..."
mkdir -p inventory/classes/network
cat > inventory/classes/network/database.yml << 'EOF'
parameters:
  network:
    name: {{project_name}}
    database_subnet: "{{primary_db_ip}}/24"
    
  firewall:
    enabled: true
    default_policy: deny
    allowed_ports:
      - 22     # SSH
      - 5432   # PostgreSQL
    allowed_sources:
      - "{{backup_server_ip}}"
      - "192.168.1.0/24"  # Adjust for your network
EOF

# Create backup network configuration
cat > inventory/classes/network/backup.yml << 'EOF'
parameters:
  network:
    name: backup
    
  firewall:
    enabled: true
    default_policy: deny
    allowed_ports:
      - 22     # SSH
    allowed_sources:
      - "{{primary_db_ip}}"
      - "192.168.1.0/24"  # Adjust for your network
EOF

# Create main Ansible playbook
echo "Creating Ansible playbooks..."
cat > playbooks/site.yml << 'EOF'
---
- name: Deploy PostgreSQL Infrastructure
  hosts: all
  become: yes
  gather_facts: yes
  
  pre_tasks:
    - name: Update system packages
      package:
        name: "*"
        state: latest
      when: ansible_os_family in ['Debian', 'RedHat']
      
- name: Configure Primary Database Server
  hosts: primary_db
  become: yes
  roles:
    - postgresql_primary
    - monitoring
    - security

- name: Configure Backup Server
  hosts: backup_server
  become: yes
  roles:
    - postgresql_backup
    - monitoring
    - security

- name: Setup Replication
  hosts: primary_db:backup_server
  become: yes
  tasks:
    - name: Configure streaming replication
      include_role:
        name: postgresql_replication
      when: postgresql.replication.enabled | default(false)
EOF

# Create backup script
echo "Creating backup scripts..."
cat > scripts/backup_postgresql.sh << 'SCRIPT_EOF'
#!/bin/bash
# PostgreSQL Backup Script for {{project_name}}

set -euo pipefail

# Configuration
PRIMARY_HOST="{{primary_db_ip}}"
PRIMARY_PORT="5432"
BACKUP_DIR="/var/lib/postgresql/backups"
RETENTION_DAYS="{{backup_retention_days}}"
DATE=$(date +%Y%m%d_%H%M%S)

# Logging
LOG_FILE="/var/log/postgresql_backup.log"
exec 1> >(tee -a "$LOG_FILE")
exec 2>&1

echo "Starting PostgreSQL backup: $DATE"

# Create backup directories
mkdir -p "$BACKUP_DIR"/{full,incremental,logical}

# Function: Full Backup
perform_full_backup() {
    echo "Performing full backup..."
    
    pg_basebackup \
        -h "$PRIMARY_HOST" \
        -p "$PRIMARY_PORT" \
        -U replicator \
        -D "$BACKUP_DIR/full/backup_$DATE" \
        -Ft \
        -z \
        -P \
        -W
    
    if [ $? -eq 0 ]; then
        echo "Full backup completed successfully"
        echo "Backup Date: $DATE" > "$BACKUP_DIR/full/backup_$DATE.info"
        echo "Primary Host: $PRIMARY_HOST" >> "$BACKUP_DIR/full/backup_$DATE.info"
        echo "Backup Size: $(du -sh "$BACKUP_DIR/full/backup_$DATE" | cut -f1)" >> "$BACKUP_DIR/full/backup_$DATE.info"
    else
        echo "Full backup failed!" >&2
        exit 1
    fi
}

# Function: Logical Backup
perform_logical_backup() {
    echo "Performing logical backup..."
    
    pg_dump \
        -h "$PRIMARY_HOST" \
        -p "$PRIMARY_PORT" \
        -U postgres \
        -Fc \
        -f "$BACKUP_DIR/logical/{{db_name}}_$DATE.dump" \
        "{{db_name}}"
    
    if [ $? -eq 0 ]; then
        echo "Logical backup completed successfully"
    else
        echo "Logical backup failed!" >&2
        exit 1
    fi
}

# Function: Cleanup Old Backups
cleanup_old_backups() {
    echo "Cleaning up backups older than $RETENTION_DAYS days..."
    
    find "$BACKUP_DIR/full" -name "backup_*" -mtime +$RETENTION_DAYS -exec rm -rf {} \;
    find "$BACKUP_DIR/logical" -name "*.dump" -mtime +$RETENTION_DAYS -delete
    
    echo "Cleanup completed"
}

# Main execution
case "${1:-full}" in
    "full")
        perform_full_backup
        cleanup_old_backups
        ;;
    "logical")
        perform_logical_backup
        cleanup_old_backups
        ;;
    "cleanup")
        cleanup_old_backups
        ;;
    *)
        echo "Usage: $0 {full|logical|cleanup}"
        exit 1
        ;;
esac

echo "Backup operation completed: $(date)"
SCRIPT_EOF

chmod +x scripts/backup_postgresql.sh

# Create monitoring script
cat > scripts/monitoring.sh << 'SCRIPT_EOF'
#!/bin/bash
# PostgreSQL Monitoring Script for {{project_name}}

PRIMARY_HOST="{{primary_db_ip}}"
BACKUP_HOST="{{backup_server_ip}}"

# Function: Database Statistics
show_stats() {
    echo "=== Database Statistics ==="
    psql -h "$PRIMARY_HOST" -U postgres -c "
        SELECT datname as database, 
               pg_size_pretty(pg_database_size(datname)) as size,
               (SELECT count(*) FROM pg_stat_activity WHERE datname = d.datname) as connections
        FROM pg_database d 
        WHERE NOT datistemplate;"
}

# Function: Replication Status
show_replication() {
    echo "=== Replication Status ==="
    psql -h "$PRIMARY_HOST" -U postgres -c "
        SELECT client_addr, state, 
               pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn)) as lag
        FROM pg_stat_replication;"
}

# Function: Backup Status
show_backups() {
    echo "=== Backup Status ==="
    echo "Latest backups on $BACKUP_HOST:"
    ssh "$BACKUP_HOST" "ls -la /var/lib/postgresql/backups/full/ | tail -5"
    echo ""
    echo "Backup disk usage:"
    ssh "$BACKUP_HOST" "df -h /var/lib/postgresql/backups"
}

# Main execution
case "${1:-stats}" in
    "--stats")
        show_stats
        ;;
    "--replication")
        show_replication
        ;;
    "--backups")
        show_backups
        ;;
    "--all")
        show_stats
        echo ""
        show_replication
        echo ""
        show_backups
        ;;
    *)
        echo "Usage: $0 {--stats|--replication|--backups|--all}"
        exit 1
        ;;
esac
SCRIPT_EOF

chmod +x scripts/monitoring.sh

# Create simple restore script template
cat > scripts/restore_postgresql.sh << 'SCRIPT_EOF'
#!/bin/bash
# PostgreSQL Restore Script Template for {{project_name}}
# WARNING: This script will REPLACE existing data!

echo "PostgreSQL Restore Script"
echo "========================"
echo "WARNING: This will replace all data in the database!"
echo "Make sure you have a current backup before proceeding."
echo ""
echo "Usage: $0 /path/to/backup/directory"
echo ""
echo "For detailed restore procedures, see the documentation:"
echo "- Physical restore: Use pg_basebackup restore procedures"
echo "- Logical restore: Use pg_restore with .dump files"
echo ""
echo "This script is intentionally incomplete for safety."
echo "Please refer to PostgreSQL documentation for restore procedures."

exit 1
SCRIPT_EOF

chmod +x scripts/restore_postgresql.sh

# Create deployment helper scripts
cat > scripts/deploy.sh << 'EOF'
#!/bin/bash
# Deploy PostgreSQL infrastructure
echo "Deploying {{project_name}} PostgreSQL infrastructure..."

# Deploy primary database
echo "Deploying primary database server..."
pyestro ansible playbook site.yml --limit primary-db

# Deploy backup server
echo "Deploying backup server..."
pyestro ansible playbook site.yml --limit backup-server

echo "Deployment completed!"
EOF

cat > scripts/status.sh << 'EOF'
#!/bin/bash
# Check PostgreSQL infrastructure status
echo "Checking {{project_name}} status..."

# Check connectivity
echo "Testing connectivity..."
pyestro status

# Check PostgreSQL status
echo "Checking PostgreSQL service..."
pyestro ansible shell "systemctl status postgresql" --limit primary-db

# Check database connectivity
echo "Testing database connection..."
pg_isready -h {{primary_db_ip}} -p 5432

echo "Status check completed!"
EOF

chmod +x scripts/*.sh

# Create SSL certificate placeholder
echo "# SSL certificates will be generated during deployment" > ssl/.gitkeep

# Final setup message
echo ""
echo "✅ {{project_name}} PostgreSQL infrastructure setup completed!"
echo ""
echo "Configuration:"
echo "  Primary Database: {{primary_db_ip}} (PostgreSQL {{postgresql_version}})"
echo "  Backup Server: {{backup_server_ip}}"
echo "  Database: {{db_name}}"
echo "  User: {{db_user}}"
{% if enable_replication == 'y' %}
echo "  Replication: Enabled"
{% endif %}
{% if enable_ssl == 'y' %}
echo "  SSL/TLS: Enabled"
{% endif %}
echo "  Backup Retention: {{backup_retention_days}} days"
echo ""
echo "Next steps:"
echo "1. Review and customize inventory files in inventory/nodes/"
echo "2. Set up SSH access to your database servers"
echo "3. Create vault files for sensitive passwords:"
echo "   ansible-vault create inventory/group_vars/all/vault.yml"
echo "4. Run: pyestro config validate"
echo "5. Deploy infrastructure: ./scripts/deploy.sh"
echo "6. Test connectivity: ./scripts/status.sh"
echo ""
echo "For detailed setup instructions, see README.md"
echo "For troubleshooting, see the PostgreSQL tutorial documentation"