#!/bin/bash
# {{project_name}} - Home Network Setup Script
# Generated by Pyestro home-network template

set -euo pipefail

PROJECT_NAME="{{project_name}}"
NETWORK_NAME="{{network_name}}"
DOMAIN_NAME="{{domain_name}}"

echo "Setting up {{project_name}} home network automation..."

# Check if we're in the right directory
if [[ ! -f "pyestro.json" ]]; then
    echo "Error: pyestro.json not found. Please run this script from the project root."
    exit 1
fi

# Install Python dependencies
echo "Installing Python dependencies..."
if command -v pip3 &> /dev/null; then
    pip3 install --user pyestro ansible
elif command -v pip &> /dev/null; then
    pip install --user pyestro ansible
else
    echo "Error: pip not found. Please install Python and pip first."
    exit 1
fi

# Validate Pyestro configuration
echo "Validating Pyestro configuration..."
if command -v pyestro &> /dev/null; then
    pyestro config validate
else
    echo "Warning: pyestro command not found in PATH. You may need to add ~/.local/bin to your PATH."
fi

# Setup project structure and repositories
echo "Setting up project structure..."
mkdir -p workdir
mkdir -p {{backup_location}}
mkdir -p scripts/helpers

# Initialize git repository if not already initialized
if [[ ! -d ".git" ]]; then
    echo "Initializing git repository..."
    git init
    git add .
    git commit -m "Initial commit: {{project_name}} home network setup"
fi

# Create helpful scripts
cat > scripts/deploy.sh << 'EOF'
#!/bin/bash
# Deploy configuration to all devices
pyestro ansible playbook site.yml "$@"
EOF

cat > scripts/backup.sh << 'EOF'
#!/bin/bash
# Backup all device configurations
pyestro ansible playbook playbooks/backup.yml
EOF

cat > scripts/status.sh << 'EOF'
#!/bin/bash
# Check status of all devices
pyestro status
EOF

chmod +x scripts/*.sh

# Create sample inventory files based on template options
{% if has_homeassistant == 'y' %}
echo "Creating Home Assistant configuration..."
mkdir -p inventory/nodes
cat > inventory/nodes/homeassistant.yml << 'EOF'
classes:
  - hardware.raspberry_pi
  - services.homeassistant
  - network.{{network_name}}
  - security.ssh_hardened

parameters:
  hostname: homeassistant
  ip_address: 192.168.1.100
  
  homeassistant:
    version: latest
    port: 8123
    ssl: true
    
  hardware:
    type: raspberry_pi_4
    memory: 4gb
    storage: 32gb_sd
EOF
{% endif %}

{% if has_nas == 'y' %}
echo "Creating NAS server configuration..."
cat > inventory/nodes/nas.yml << 'EOF'
classes:
  - hardware.x86_server
  - services.nas
  - services.plex
  - network.{{network_name}}
  - security.ssh_hardened

parameters:
  hostname: nas
  ip_address: 192.168.1.110
  
  nas:
    storage_pool: /dev/sdb1
    shares:
      - name: media
        path: /storage/media
      - name: backups
        path: /storage/backups
        
  plex:
    version: latest
    media_directories:
      - /storage/media/movies
      - /storage/media/tv_shows
EOF
{% endif %}

# Create network configuration
echo "Creating network configuration..."
mkdir -p inventory/classes/network
cat > inventory/classes/network/{{network_name}}.yml << 'EOF'
parameters:
  network:
    name: {{network_name}}
    domain: {{domain_name}}
    subnet: {{network_subnet}}
    gateway: 192.168.1.1
    dns_servers:
      - 1.1.1.1
      - 8.8.8.8
      
  firewall:
    enabled: true
    default_policy: deny
    allowed_ports:
      - 22    # SSH
      - 80    # HTTP
      - 443   # HTTPS
EOF

# Create basic playbook structure
echo "Creating Ansible playbooks..."
mkdir -p playbooks/roles
cat > playbooks/site.yml << 'EOF'
---
- name: Configure all home network devices
  hosts: all
  become: yes
  gather_facts: yes
  
  tasks:
    - name: Update system packages
      package:
        name: "*"
        state: latest
      when: ansible_os_family in ['Debian', 'RedHat']
      
    - name: Configure firewall
      include_role:
        name: firewall
      when: firewall.enabled | default(false)
      
    - name: Apply device-specific configuration
      include_tasks: "tasks/{{ inventory_hostname }}.yml"
      when: inventory_hostname in groups['all']
EOF

# Final setup message
echo ""
echo "âœ… {{project_name}} home network setup completed!"
echo ""
echo "Next steps:"
echo "1. Edit inventory files to match your actual devices"
echo "2. Update IP addresses and hostnames"
echo "3. Configure SSH access to your devices"
echo "4. Run: pyestro config validate"
echo "5. Test connectivity: pyestro status"
echo "6. Deploy: ./scripts/deploy.sh"
echo ""
echo "Configuration files:"
echo "- Main config: pyestro.json"
echo "- Inventory: inventory/"
echo "- Playbooks: playbooks/"
echo "- Scripts: scripts/"
echo ""
echo "For more information, see README.md"