{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyestro Documentation","text":"<p>Pyestro is a modern Python-based configuration management orchestrator that provides a unified interface for managing heterogeneous infrastructure environments.</p> <p>What is Pyestro?</p> <p>Pyestro acts as a bridge between metadata stored in reclass and various configuration management tools (primarily Ansible), enabling consistent management across multiple projects and environments.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udc0d Modern Python Implementation - Complete rewrite of the original bash-based Maestro</li> <li>\ud83d\udd27 Configuration Management - Unified interface for multiple CM tools</li> <li>\ud83d\udcca Reclass Integration - Leverage reclass as your knowledge base/CMDB</li> <li>\u26a1 Ansible Support - Execute modules, playbooks, and manage Galaxy roles</li> <li>\ud83d\udd12 Security First - Comprehensive input validation and sanitization</li> <li>\ud83c\udf10 Multi-Environment - Support for complex, heterogeneous infrastructures</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/yourname/pyestro.git\ncd pyestro\n\n# Install dependencies\npip install -r requirements.txt\n\n# Initialize your first project\npython pyestro.py init\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code># Show project status\npython pyestro.py status\n\n# List available nodes\npython pyestro.py nodes list\n\n# Execute Ansible ping on all nodes\npython pyestro.py ansible module ping\n\n# Run a playbook\npython pyestro.py ansible playbook site.yml\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>Pyestro implements a three-layer architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Reclass       \u2502    \u2502   Plain Files   \u2502\n\u2502  (metadata)     \u2502    \u2502 (config files)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                      \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502    Pyestro      \u2502\n            \u2502  (orchestrator) \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502     Ansible     \u2502\n            \u2502  (config mgmt)  \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502  Target Hosts   \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Getting Started - Installation and initial setup</li> <li>User Guide - Daily usage and commands</li> <li>Developer Guide - Contributing and extending</li> <li>Reference - Complete command and configuration reference</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>Documentation: You're reading it!</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul> <p>Pyestro is the modern evolution of the original Maestro configuration management orchestrator.</p>"},{"location":"developer-guide/api/","title":"API Reference","text":"<p>Python API reference for Pyestro components.</p>"},{"location":"developer-guide/api/#overview","title":"Overview","text":"<p>This page provides API documentation for the core Pyestro modules. Use this reference when extending Pyestro or integrating it into other projects.</p> <p>Work in Progress</p> <p>This API reference is being developed. For now, see the source code for detailed implementation details.</p>"},{"location":"developer-guide/api/#core-modules","title":"Core Modules","text":""},{"location":"developer-guide/api/#configuration-management","title":"Configuration Management","text":""},{"location":"developer-guide/api/#pyestrocoreconfigmaestroconfig","title":"<code>pyestro.core.config.MaestroConfig</code>","text":"<p>Main configuration class for Pyestro.</p> <pre><code>class MaestroConfig:\n    def __init__(self, config_path: Path = None)\n    def load_config(self) -&gt; Dict[str, Any]\n    def validate(self) -&gt; List[str]\n    def get(self, key: str, default: Any = None) -&gt; Any\n    def set(self, key: str, value: Any) -&gt; None\n</code></pre> <p>Methods:</p> <ul> <li><code>load_config()</code> - Load configuration from file</li> <li><code>validate()</code> - Validate configuration, returns list of errors</li> <li><code>get(key, default)</code> - Get configuration value</li> <li><code>set(key, value)</code> - Set configuration value</li> </ul> <p>Example: <pre><code>from pyestro.core.config import MaestroConfig\n\nconfig = MaestroConfig(\"pyestro.json\")\ndata = config.load_config()\nerrors = config.validate()\n</code></pre></p>"},{"location":"developer-guide/api/#pyestrocoreconfigconfigmanager","title":"<code>pyestro.core.config.ConfigManager</code>","text":"<p>Configuration management utilities.</p> <pre><code>class ConfigManager:\n    @staticmethod\n    def migrate_from_bash(maestro_path: Path, output_path: Path)\n    @staticmethod\n    def create_default_config(output_path: Path)\n    @staticmethod\n    def validate_config_file(config_path: Path) -&gt; List[str]\n</code></pre>"},{"location":"developer-guide/api/#input-validation","title":"Input Validation","text":""},{"location":"developer-guide/api/#pyestrocorevalidationinputvalidator","title":"<code>pyestro.core.validation.InputValidator</code>","text":"<p>Input validation and sanitization utilities.</p> <pre><code>class InputValidator:\n    @staticmethod\n    def sanitize_node_name(name: str) -&gt; str\n    @staticmethod\n    def validate_url(url: str) -&gt; str\n    @staticmethod\n    def validate_path(path: str) -&gt; Path\n    @staticmethod\n    def validate_filter_pattern(pattern: str) -&gt; str\n    @staticmethod\n    def sanitize_shell_input(input_str: str) -&gt; str\n</code></pre> <p>Methods:</p> <ul> <li><code>sanitize_node_name(name)</code> - Sanitize node names for reclass</li> <li><code>validate_url(url)</code> - Validate and normalize URLs</li> <li><code>validate_path(path)</code> - Validate file system paths</li> <li><code>validate_filter_pattern(pattern)</code> - Validate search patterns</li> <li><code>sanitize_shell_input(input)</code> - Sanitize shell command inputs</li> </ul> <p>Example: <pre><code>from pyestro.core.validation import InputValidator\n\nsafe_name = InputValidator.sanitize_node_name(\"web01.example.com\")\nsafe_url = InputValidator.validate_url(\"https://github.com/user/repo.git\")\n</code></pre></p>"},{"location":"developer-guide/api/#git-operations","title":"Git Operations","text":""},{"location":"developer-guide/api/#pyestrocoregitgitmanager","title":"<code>pyestro.core.git.GitManager</code>","text":"<p>Git repository management.</p> <pre><code>class GitManager:\n    def __init__(self, dry_run: bool = True)\n    def clone_repository(self, url: str, destination: Path) -&gt; bool\n    def pull_repository(self, repo_path: Path) -&gt; bool\n    def get_repository_status(self, repo_path: Path) -&gt; Dict[str, Any]\n    def clone_repositories(self, repos: Dict[str, str], base_dir: Path) -&gt; Dict[str, bool]\n</code></pre> <p>Example: <pre><code>from pyestro.core.git import GitManager\n\ngit_mgr = GitManager(dry_run=False)\nsuccess = git_mgr.clone_repository(\n    \"https://github.com/user/repo.git\", \n    Path(\"./repo\")\n)\n</code></pre></p>"},{"location":"developer-guide/api/#file-operations","title":"File Operations","text":""},{"location":"developer-guide/api/#pyestrocorefile_opsfilemanager","title":"<code>pyestro.core.file_ops.FileManager</code>","text":"<p>File and directory operations.</p> <pre><code>class FileManager:\n    def __init__(self, dry_run: bool = True)\n    def sync_directories(self, source: Path, dest: Path, options: str = \"\") -&gt; bool\n    def merge_directories(self, source: Path, dest: Path, backup: bool = True) -&gt; bool\n    def create_backup(self, path: Path) -&gt; Path\n</code></pre>"},{"location":"developer-guide/api/#integration-modules","title":"Integration Modules","text":""},{"location":"developer-guide/api/#reclass-integration","title":"Reclass Integration","text":""},{"location":"developer-guide/api/#pyestroparsersreclass_parserreclassmanager","title":"<code>pyestro.parsers.reclass_parser.ReclassManager</code>","text":"<p>Reclass inventory management.</p> <pre><code>class ReclassManager:\n    def __init__(self, inventory_dir: Path, dry_run: bool = True)\n    def get_node_data(self, node_name: str) -&gt; Optional[Dict[str, Any]]\n    def get_inventory_data(self) -&gt; Optional[Dict[str, Any]]\n    def list_nodes(self) -&gt; List[str]\n    def list_classes(self) -&gt; List[str]\n    def filter_nodes(self, node_filter: str = None, class_filter: str = None) -&gt; List[str]\n    def search_parameter(self, parameter_path: str) -&gt; Dict[str, Any]\n    def validate_inventory(self) -&gt; List[str]\n</code></pre> <p>Example: <pre><code>from pyestro.parsers.reclass_parser import ReclassManager\n\nreclass = ReclassManager(Path(\"./inventory\"))\nnodes = reclass.list_nodes()\nnode_data = reclass.get_node_data(\"web01.example.com\")\n</code></pre></p>"},{"location":"developer-guide/api/#ansible-integration","title":"Ansible Integration","text":""},{"location":"developer-guide/api/#pyestrointegrationsansibleansiblemanager","title":"<code>pyestro.integrations.ansible.AnsibleManager</code>","text":"<p>Ansible operations management.</p> <pre><code>class AnsibleManager:\n    def __init__(self, dry_run: bool = True)\n    def execute_module(self, module: str, module_args: str, host_pattern: str) -&gt; bool\n    def run_playbook(self, playbook: str, host_pattern: str, extra_vars: Dict) -&gt; bool\n    def list_playbooks(self, playbook_dirs: List[Path]) -&gt; List[str]\n    def test_connectivity(self, host_pattern: str) -&gt; Dict[str, bool]\n    def install_galaxy_roles(self, requirements_file: Path) -&gt; bool\n    def generate_config(self, output_path: Path, inventory_path: Path) -&gt; bool\n</code></pre> <p>Example: <pre><code>from pyestro.integrations.ansible import AnsibleManager\n\nansible = AnsibleManager(dry_run=False)\nsuccess = ansible.execute_module(\"ping\", \"\", \"all\")\nresult = ansible.test_connectivity(\"web*\")\n</code></pre></p>"},{"location":"developer-guide/api/#cli-components","title":"CLI Components","text":""},{"location":"developer-guide/api/#command-handler-base","title":"Command Handler Base","text":""},{"location":"developer-guide/api/#pyestroclibasecommandhandler","title":"<code>pyestro.cli.base.CommandHandler</code>","text":"<p>Base class for CLI command handlers.</p> <pre><code>class CommandHandler:\n    def __init__(self, config: MaestroConfig)\n    def execute(self, args: argparse.Namespace) -&gt; int\n    def add_arguments(self, parser: argparse.ArgumentParser) -&gt; None\n</code></pre>"},{"location":"developer-guide/api/#main-cli-interface","title":"Main CLI Interface","text":""},{"location":"developer-guide/api/#pyestroclimainpyestrocli","title":"<code>pyestro.cli.main.PyestroCLI</code>","text":"<p>Main CLI application class.</p> <pre><code>class PyestroCLI:\n    def __init__(self)\n    def run(self, args: List[str] = None) -&gt; int\n    def register_command(self, name: str, handler: CommandHandler) -&gt; None\n</code></pre>"},{"location":"developer-guide/api/#utility-functions","title":"Utility Functions","text":""},{"location":"developer-guide/api/#logging-utilities","title":"Logging Utilities","text":"<pre><code>from pyestro.core.config import log_info, log_warning, log_error\n\nlog_info(\"Operation completed successfully\")\nlog_warning(\"Configuration file not found, using defaults\")\nlog_error(\"Failed to connect to repository\")\n</code></pre>"},{"location":"developer-guide/api/#path-utilities","title":"Path Utilities","text":"<pre><code>from pyestro.core.file_ops import ensure_directory, safe_path_join\n\nensure_directory(Path(\"./workdir\"))\nsafe_path = safe_path_join(base_dir, user_input)\n</code></pre>"},{"location":"developer-guide/api/#error-handling","title":"Error Handling","text":""},{"location":"developer-guide/api/#exception-classes","title":"Exception Classes","text":""},{"location":"developer-guide/api/#pyestrocorevalidationvalidationerror","title":"<code>pyestro.core.validation.ValidationError</code>","text":"<p>Raised when input validation fails.</p> <pre><code>class ValidationError(Exception):\n    def __init__(self, message: str, field: str = None)\n</code></pre>"},{"location":"developer-guide/api/#pyestrocoreconfigconfigurationerror","title":"<code>pyestro.core.config.ConfigurationError</code>","text":"<p>Raised when configuration is invalid.</p> <pre><code>class ConfigurationError(Exception):\n    def __init__(self, message: str, config_path: Path = None)\n</code></pre>"},{"location":"developer-guide/api/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>from pyestro.core.validation import ValidationError\n\ntry:\n    validated_input = InputValidator.sanitize_node_name(user_input)\nexcept ValidationError as e:\n    log_error(f\"Invalid input: {e}\")\n    return False\n</code></pre>"},{"location":"developer-guide/api/#integration-examples","title":"Integration Examples","text":""},{"location":"developer-guide/api/#custom-command-handler","title":"Custom Command Handler","text":"<pre><code>from pyestro.cli.base import CommandHandler\nfrom pyestro.core.config import MaestroConfig\n\nclass CustomCommand(CommandHandler):\n    def __init__(self, config: MaestroConfig):\n        super().__init__(config)\n\n    def add_arguments(self, parser):\n        parser.add_argument('--custom-option', help='Custom option')\n\n    def execute(self, args):\n        # Implement custom logic\n        log_info(f\"Executing custom command with {args.custom_option}\")\n        return 0\n</code></pre>"},{"location":"developer-guide/api/#custom-integration","title":"Custom Integration","text":"<pre><code>from pyestro.core.config import MaestroConfig\nfrom pyestro.core.validation import InputValidator\n\nclass CustomIntegration:\n    def __init__(self, config: MaestroConfig):\n        self.config = config\n        self.dry_run = config.get('maestro.dry_run', True)\n\n    def execute_custom_operation(self, target: str):\n        # Validate input\n        safe_target = InputValidator.sanitize_shell_input(target)\n\n        # Execute operation\n        if self.dry_run:\n            log_info(f\"DRY RUN: Would execute operation on {safe_target}\")\n        else:\n            # Actual implementation\n            pass\n</code></pre>"},{"location":"developer-guide/api/#development-guidelines","title":"Development Guidelines","text":""},{"location":"developer-guide/api/#adding-new-api-methods","title":"Adding New API Methods","text":"<ol> <li>Input Validation: Always validate inputs using <code>InputValidator</code></li> <li>Error Handling: Use appropriate exception types</li> <li>Logging: Use logging utilities for feedback</li> <li>Dry-run Support: Support dry-run mode where applicable</li> <li>Documentation: Document with docstrings and type hints</li> </ol>"},{"location":"developer-guide/api/#type-hints","title":"Type Hints","text":"<p>Use comprehensive type hints for all public APIs:</p> <pre><code>from typing import Dict, List, Optional, Union, Any\nfrom pathlib import Path\n\ndef process_nodes(\n    nodes: List[str], \n    filters: Optional[Dict[str, str]] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"Process node list with optional filters.\"\"\"\n    pass\n</code></pre>"},{"location":"developer-guide/api/#testing-apis","title":"Testing APIs","text":"<pre><code>import pytest\nfrom pyestro.core.config import MaestroConfig\n\ndef test_config_loading():\n    config = MaestroConfig(\"test_config.json\")\n    data = config.load_config()\n    assert isinstance(data, dict)\n\ndef test_input_validation():\n    from pyestro.core.validation import InputValidator, ValidationError\n\n    with pytest.raises(ValidationError):\n        InputValidator.sanitize_node_name(\"invalid../node\")\n</code></pre> <p>For more detailed implementation examples, see the source code in the respective modules.</p>"},{"location":"developer-guide/architecture/","title":"Architecture","text":"<p>Pyestro architecture and design principles.</p>"},{"location":"developer-guide/architecture/#overview","title":"Overview","text":"<p>Pyestro follows a modular, three-layer architecture that provides clear separation of concerns while maintaining flexibility and extensibility.</p>"},{"location":"developer-guide/architecture/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    USER INTERFACE                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 CLI Interface (pyestro/cli/main.py)                        \u2502\n\u2502 \u251c\u2500\u2500 Command Parsing                                        \u2502\n\u2502 \u251c\u2500\u2500 Option Validation                                      \u2502\n\u2502 \u2514\u2500\u2500 Output Formatting                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   CORE LAYER                               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Configuration Management (pyestro/core/config.py)          \u2502\n\u2502 \u251c\u2500\u2500 JSON/YAML Configuration Loading                        \u2502\n\u2502 \u251c\u2500\u2500 Environment Variable Processing                        \u2502\n\u2502 \u2514\u2500\u2500 Configuration Validation                               \u2502\n\u2502                                                             \u2502\n\u2502 Input Validation (pyestro/core/validation.py)              \u2502\n\u2502 \u251c\u2500\u2500 Security Input Sanitization                            \u2502\n\u2502 \u251c\u2500\u2500 Parameter Validation                                   \u2502\n\u2502 \u2514\u2500\u2500 Error Handling                                         \u2502\n\u2502                                                             \u2502\n\u2502 File Operations (pyestro/core/file_ops.py)                 \u2502\n\u2502 \u251c\u2500\u2500 Rsync Integration                                       \u2502\n\u2502 \u251c\u2500\u2500 File Synchronization                                   \u2502\n\u2502 \u2514\u2500\u2500 Backup Management                                       \u2502\n\u2502                                                             \u2502\n\u2502 Git Operations (pyestro/core/git.py)                       \u2502\n\u2502 \u251c\u2500\u2500 Repository Management                                   \u2502\n\u2502 \u251c\u2500\u2500 Clone/Pull Operations                                   \u2502\n\u2502 \u2514\u2500\u2500 Status Checking                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                INTEGRATION LAYER                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Reclass Parser (pyestro/parsers/reclass_parser.py)         \u2502\n\u2502 \u251c\u2500\u2500 JSON Parsing                                           \u2502\n\u2502 \u251c\u2500\u2500 Node/Class Management                                  \u2502\n\u2502 \u251c\u2500\u2500 Parameter Resolution                                    \u2502\n\u2502 \u2514\u2500\u2500 Inventory Validation                                    \u2502\n\u2502                                                             \u2502\n\u2502 Ansible Integration (pyestro/integrations/ansible.py)      \u2502\n\u2502 \u251c\u2500\u2500 Module Execution                                        \u2502\n\u2502 \u251c\u2500\u2500 Playbook Management                                     \u2502\n\u2502 \u251c\u2500\u2500 Galaxy Role Management                                  \u2502\n\u2502 \u2514\u2500\u2500 Configuration Generation                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                EXTERNAL SYSTEMS                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502 \u2502   Reclass   \u2502 \u2502   Ansible   \u2502 \u2502     Git     \u2502            \u2502\n\u2502 \u2502 (Metadata)  \u2502 \u2502    (CM)     \u2502 \u2502 (Repos)     \u2502            \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2502                               \u2502                             \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502 \u2502   Target    \u2502 \u2502  File       \u2502 \u2502  Network    \u2502            \u2502\n\u2502 \u2502   Hosts     \u2502 \u2502  Systems    \u2502 \u2502  Resources  \u2502            \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"developer-guide/architecture/#core-design-principles","title":"Core Design Principles","text":""},{"location":"developer-guide/architecture/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>CLI Layer: User interface and command parsing</li> <li>Core Layer: Business logic and operations</li> <li>Integration Layer: External tool interfaces</li> <li>External Systems: Managed resources</li> </ul>"},{"location":"developer-guide/architecture/#2-security-first","title":"2. Security First","text":"<ul> <li>Input Validation: All inputs validated and sanitized</li> <li>Path Traversal Protection: Secure file operations</li> <li>Command Injection Prevention: Safe external command execution</li> <li>Privilege Management: Controlled privilege escalation</li> </ul>"},{"location":"developer-guide/architecture/#3-error-handling","title":"3. Error Handling","text":"<ul> <li>Graceful Degradation: Continue where possible</li> <li>Informative Messages: Clear, actionable error messages</li> <li>Logging: Comprehensive logging for debugging</li> <li>Recovery: Support for recovery operations</li> </ul>"},{"location":"developer-guide/architecture/#4-modularity","title":"4. Modularity","text":"<ul> <li>Plugin Architecture: Extensible design</li> <li>Interface Contracts: Clear API boundaries</li> <li>Dependency Injection: Testable components</li> <li>Configuration Driven: Behavior controlled by configuration</li> </ul>"},{"location":"developer-guide/architecture/#component-details","title":"Component Details","text":""},{"location":"developer-guide/architecture/#cli-interface-pyestroclimainpy","title":"CLI Interface (<code>pyestro/cli/main.py</code>)","text":"<p>The command-line interface provides: - Hierarchical command structure - Option parsing and validation - Output formatting (JSON, YAML, table) - Interactive prompts and confirmations</p> <pre><code># Command structure example\npython pyestro.py [global-options] &lt;command&gt; [subcommand] [options] [args]\n</code></pre>"},{"location":"developer-guide/architecture/#configuration-management-pyestrocoreconfigpy","title":"Configuration Management (<code>pyestro/core/config.py</code>)","text":"<p>Features: - JSON primary format, YAML support planned - Environment variable overrides - Configuration validation - Migration from bash .maestro files</p> <pre><code>class MaestroConfig:\n    def __init__(self, config_path: Path)\n    def load_config(self) -&gt; Dict[str, Any]\n    def validate(self) -&gt; List[str]\n    def migrate_from_bash(self, maestro_path: Path)\n</code></pre>"},{"location":"developer-guide/architecture/#input-validation-pyestrocorevalidationpy","title":"Input Validation (<code>pyestro/core/validation.py</code>)","text":"<p>Security-focused validation: - URL validation and sanitization - Hostname validation - Path traversal prevention - Shell command sanitization</p> <pre><code>class InputValidator:\n    @staticmethod\n    def sanitize_node_name(name: str) -&gt; str\n    @staticmethod\n    def validate_url(url: str) -&gt; str\n    @staticmethod\n    def validate_path(path: str) -&gt; Path\n</code></pre>"},{"location":"developer-guide/architecture/#reclass-integration-pyestroparsersreclass_parserpy","title":"Reclass Integration (<code>pyestro/parsers/reclass_parser.py</code>)","text":"<p>Comprehensive reclass support: - JSON parsing of reclass output - Node and class management - Parameter search and filtering - Inventory validation</p> <pre><code>class ReclassManager:\n    def get_node_data(self, node_name: str) -&gt; Optional[Dict[str, Any]]\n    def get_inventory_data(self) -&gt; Optional[Dict[str, Any]]\n    def filter_nodes(self, filters: Dict[str, str]) -&gt; List[str]\n</code></pre>"},{"location":"developer-guide/architecture/#ansible-integration-pyestrointegrationsansiblepy","title":"Ansible Integration (<code>pyestro/integrations/ansible.py</code>)","text":"<p>Full Ansible support: - Module execution with parameter validation - Playbook discovery and execution - Galaxy role management - Dynamic host pattern generation</p> <pre><code>class AnsibleManager:\n    def execute_module(self, module: str, args: str, hosts: str)\n    def run_playbook(self, playbook: str, hosts: str, vars: Dict)\n    def install_galaxy_roles(self, requirements: Path)\n</code></pre>"},{"location":"developer-guide/architecture/#data-flow","title":"Data Flow","text":""},{"location":"developer-guide/architecture/#typical-operation-flow","title":"Typical Operation Flow","text":"<ol> <li> <p>Command Parsing <pre><code>CLI \u2192 ArgumentParser \u2192 Command Dispatcher\n</code></pre></p> </li> <li> <p>Configuration Loading <pre><code>Config File \u2192 Environment Variables \u2192 Validation \u2192 Runtime Config\n</code></pre></p> </li> <li> <p>Input Validation <pre><code>User Input \u2192 Sanitization \u2192 Security Checks \u2192 Validated Parameters\n</code></pre></p> </li> <li> <p>External Tool Integration <pre><code>Validated Parameters \u2192 Tool Execution \u2192 Output Processing \u2192 User Response\n</code></pre></p> </li> <li> <p>Error Handling <pre><code>Errors \u2192 Logging \u2192 User-Friendly Messages \u2192 Recovery Options\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/architecture/#extension-points","title":"Extension Points","text":""},{"location":"developer-guide/architecture/#adding-new-commands","title":"Adding New Commands","text":"<ol> <li>Create command handler in <code>pyestro/cli/</code></li> <li>Register in main command dispatcher</li> <li>Add validation rules</li> <li>Implement business logic</li> <li>Add tests</li> </ol>"},{"location":"developer-guide/architecture/#adding-new-integrations","title":"Adding New Integrations","text":"<ol> <li>Create integration module in <code>pyestro/integrations/</code></li> <li>Implement standard interface</li> <li>Add configuration schema</li> <li>Add input validation</li> <li>Add error handling</li> </ol>"},{"location":"developer-guide/architecture/#adding-new-parsers","title":"Adding New Parsers","text":"<ol> <li>Create parser module in <code>pyestro/parsers/</code></li> <li>Implement parser interface</li> <li>Add data validation</li> <li>Add caching support</li> <li>Add tests</li> </ol>"},{"location":"developer-guide/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"developer-guide/architecture/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Reclass Data: Cache inventory data to avoid repeated queries</li> <li>Configuration: Cache validated configuration</li> <li>Repository Status: Cache git status information</li> </ul>"},{"location":"developer-guide/architecture/#parallel-operations","title":"Parallel Operations","text":"<ul> <li>Repository Operations: Parallel git operations where safe</li> <li>Ansible Execution: Support for parallel module execution</li> <li>File Operations: Parallel file synchronization</li> </ul>"},{"location":"developer-guide/architecture/#memory-management","title":"Memory Management","text":"<ul> <li>Streaming: Stream large outputs rather than loading in memory</li> <li>Lazy Loading: Load data only when needed</li> <li>Resource Cleanup: Proper cleanup of resources</li> </ul>"},{"location":"developer-guide/architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"developer-guide/architecture/#unit-tests","title":"Unit Tests","text":"<ul> <li>Isolated Testing: Each component tested in isolation</li> <li>Mock Dependencies: External dependencies mocked</li> <li>Input Validation: Comprehensive input validation testing</li> <li>Error Conditions: Error condition testing</li> </ul>"},{"location":"developer-guide/architecture/#integration-tests","title":"Integration Tests","text":"<ul> <li>End-to-End: Complete workflow testing</li> <li>External Tools: Testing with real external tools</li> <li>Configuration: Various configuration scenarios</li> <li>Error Recovery: Error recovery testing</li> </ul>"},{"location":"developer-guide/architecture/#performance-tests","title":"Performance Tests","text":"<ul> <li>Large Inventories: Testing with large inventories (1000+ nodes)</li> <li>Concurrent Operations: Multi-user scenarios</li> <li>Memory Usage: Memory leak detection</li> <li>Response Times: Performance benchmarking</li> </ul>"},{"location":"developer-guide/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"developer-guide/architecture/#input-validation","title":"Input Validation","text":"<ul> <li>Sanitization: All inputs sanitized before processing</li> <li>Validation: Type and format validation</li> <li>Injection Prevention: SQL/Command injection prevention</li> <li>Path Traversal: Directory traversal prevention</li> </ul>"},{"location":"developer-guide/architecture/#privilege-management","title":"Privilege Management","text":"<ul> <li>Least Privilege: Run with minimum required privileges</li> <li>Sudo Integration: Controlled privilege escalation</li> <li>User Context: Operations in user context where possible</li> <li>Audit Trail: Logging of privileged operations</li> </ul>"},{"location":"developer-guide/architecture/#secrets-management","title":"Secrets Management","text":"<ul> <li>No Hardcoded Secrets: No secrets in code or configuration</li> <li>Environment Variables: Sensitive data via environment variables</li> <li>Secure Storage: Integration with secure storage systems</li> <li>Logging Safety: Prevent secrets in logs</li> </ul>"},{"location":"developer-guide/architecture/#future-architecture-enhancements","title":"Future Architecture Enhancements","text":""},{"location":"developer-guide/architecture/#planned-improvements","title":"Planned Improvements","text":"<ul> <li>Plugin System: Dynamic plugin loading</li> <li>Web Interface: REST API and web UI</li> <li>Database Backend: Optional database for large inventories</li> <li>Distributed Operations: Multi-node orchestration</li> <li>Event System: Event-driven architecture</li> <li>Metrics Collection: Performance and usage metrics</li> </ul>"},{"location":"developer-guide/architecture/#scalability-improvements","title":"Scalability Improvements","text":"<ul> <li>Horizontal Scaling: Multi-instance support</li> <li>Load Balancing: Request load balancing</li> <li>Caching Layers: Multi-level caching</li> <li>Async Operations: Asynchronous operation support</li> </ul> <p>This architecture provides a solid foundation for the current Pyestro implementation while allowing for future enhancements and scalability improvements.</p>"},{"location":"developer-guide/contributing/","title":"Contributing","text":"<p>Guidelines for contributing to the Pyestro project.</p>"},{"location":"developer-guide/contributing/#getting-started","title":"Getting Started","text":"<p>Thank you for your interest in contributing to Pyestro! This guide will help you get started with development and contributions.</p>"},{"location":"developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ - Required for development</li> <li>Git - For version control</li> <li>Virtual Environment - Recommended for isolation</li> </ul>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork and Clone <pre><code>git clone https://github.com/yourfork/pyestro.git\ncd pyestro\n</code></pre></p> </li> <li> <p>Create Virtual Environment <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\npip install -r requirements-dev.txt  # Development dependencies\n</code></pre></p> </li> <li> <p>Install in Development Mode <pre><code>pip install -e .\n</code></pre></p> </li> <li> <p>Verify Installation <pre><code>python pyestro.py --version\npython -m pytest tests/\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<pre><code>pyestro/\n\u251c\u2500\u2500 pyestro/                  # Main package\n\u2502   \u251c\u2500\u2500 cli/                  # Command line interface\n\u2502   \u251c\u2500\u2500 core/                 # Core functionality\n\u2502   \u251c\u2500\u2500 parsers/              # Data parsers (reclass, etc.)\n\u2502   \u2514\u2500\u2500 integrations/         # External tool integrations\n\u251c\u2500\u2500 tests/                    # Test suite\n\u2502   \u251c\u2500\u2500 unit/                 # Unit tests\n\u2502   \u251c\u2500\u2500 integration/          # Integration tests\n\u2502   \u2514\u2500\u2500 fixtures/             # Test fixtures\n\u251c\u2500\u2500 docs/                     # Documentation\n\u251c\u2500\u2500 examples/                 # Example configurations\n\u251c\u2500\u2500 pyproject.toml           # Project configuration\n\u251c\u2500\u2500 requirements.txt         # Runtime dependencies\n\u251c\u2500\u2500 requirements-dev.txt     # Development dependencies\n\u2514\u2500\u2500 README.md               # Project overview\n</code></pre>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code>git checkout -b feature/new-feature-name\n</code></pre>"},{"location":"developer-guide/contributing/#2-make-changes","title":"2. Make Changes","text":"<p>Follow the coding standards and guidelines below.</p>"},{"location":"developer-guide/contributing/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\npython -m pytest\n\n# Run with coverage\npython -m pytest --cov=pyestro\n\n# Run specific test file\npython -m pytest tests/unit/test_config.py\n</code></pre>"},{"location":"developer-guide/contributing/#4-update-documentation","title":"4. Update Documentation","text":"<p>Update relevant documentation in the <code>docs/</code> directory.</p>"},{"location":"developer-guide/contributing/#5-commit-changes","title":"5. Commit Changes","text":"<pre><code>git add .\ngit commit -m \"feat: add new feature description\"\n</code></pre>"},{"location":"developer-guide/contributing/#6-push-and-create-pr","title":"6. Push and Create PR","text":"<pre><code>git push origin feature/new-feature-name\n</code></pre> <p>Then create a Pull Request on GitHub.</p>"},{"location":"developer-guide/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"developer-guide/contributing/#python-style-guide","title":"Python Style Guide","text":"<p>We follow PEP 8 with some modifications:</p> <ul> <li>Line Length: 100 characters (not 79)</li> <li>String Quotes: Use double quotes <code>\"</code> for strings</li> <li>Import Order: Standard, third-party, local imports</li> </ul>"},{"location":"developer-guide/contributing/#code-formatting","title":"Code Formatting","text":"<p>Use the following tools for consistent formatting:</p> <pre><code># Format code\nblack pyestro/ tests/\n\n# Sort imports\nisort pyestro/ tests/\n\n# Lint code\nflake8 pyestro/ tests/\n\n# Type checking\nmypy pyestro/\n</code></pre>"},{"location":"developer-guide/contributing/#type-hints","title":"Type Hints","text":"<p>Use type hints for all public APIs and complex functions:</p> <pre><code>from typing import Dict, List, Optional, Union, Any\nfrom pathlib import Path\n\ndef process_nodes(\n    nodes: List[str], \n    config: Dict[str, Any],\n    dry_run: bool = True\n) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Process nodes with given configuration.\"\"\"\n    pass\n</code></pre>"},{"location":"developer-guide/contributing/#documentation","title":"Documentation","text":"<p>All public functions and classes must have docstrings:</p> <pre><code>def validate_configuration(config_path: Path) -&gt; List[str]:\n    \"\"\"Validate configuration file and return list of errors.\n\n    Args:\n        config_path: Path to configuration file\n\n    Returns:\n        List of validation error messages\n\n    Raises:\n        FileNotFoundError: If configuration file doesn't exist\n        json.JSONDecodeError: If configuration file is invalid JSON\n    \"\"\"\n    pass\n</code></pre>"},{"location":"developer-guide/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"developer-guide/contributing/#test-structure","title":"Test Structure","text":"<ul> <li>Unit Tests: Test individual functions/classes in isolation</li> <li>Integration Tests: Test component interactions</li> <li>End-to-End Tests: Test complete workflows</li> </ul>"},{"location":"developer-guide/contributing/#writing-tests","title":"Writing Tests","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom pyestro.core.config import MaestroConfig\n\nclass TestMaestroConfig:\n    def test_load_valid_config(self):\n        \"\"\"Test loading a valid configuration file.\"\"\"\n        config = MaestroConfig(\"test_config.json\")\n        data = config.load_config()\n        assert isinstance(data, dict)\n        assert \"maestro\" in data\n\n    def test_load_invalid_config(self):\n        \"\"\"Test loading an invalid configuration file.\"\"\"\n        config = MaestroConfig(\"invalid_config.json\")\n        with pytest.raises(ConfigurationError):\n            config.load_config()\n\n    @patch('pyestro.core.config.Path.exists')\n    def test_missing_config_file(self, mock_exists):\n        \"\"\"Test handling missing configuration file.\"\"\"\n        mock_exists.return_value = False\n        config = MaestroConfig(\"missing.json\")\n        with pytest.raises(FileNotFoundError):\n            config.load_config()\n</code></pre>"},{"location":"developer-guide/contributing/#test-fixtures","title":"Test Fixtures","text":"<p>Use fixtures for common test data:</p> <pre><code>@pytest.fixture\ndef sample_config():\n    \"\"\"Provide sample configuration for testing.\"\"\"\n    return {\n        \"maestro\": {\n            \"project_dir\": \"/tmp/test\",\n            \"dry_run\": True\n        },\n        \"repositories\": {\n            \"test_repo\": \"https://github.com/test/repo.git\"\n        }\n    }\n\ndef test_config_validation(sample_config):\n    \"\"\"Test configuration validation with sample data.\"\"\"\n    config = MaestroConfig()\n    config.data = sample_config\n    errors = config.validate()\n    assert len(errors) == 0\n</code></pre>"},{"location":"developer-guide/contributing/#mocking-external-dependencies","title":"Mocking External Dependencies","text":"<p>Mock external tools and services:</p> <pre><code>@patch('subprocess.run')\ndef test_reclass_execution(mock_subprocess):\n    \"\"\"Test reclass command execution.\"\"\"\n    mock_subprocess.return_value.stdout = '{\"nodes\": {}}'\n    mock_subprocess.return_value.returncode = 0\n\n    from pyestro.parsers.reclass_parser import ReclassManager\n    reclass = ReclassManager(Path(\"/test/inventory\"))\n    data = reclass.get_inventory_data()\n\n    assert data == {\"nodes\": {}}\n    mock_subprocess.assert_called_once()\n</code></pre>"},{"location":"developer-guide/contributing/#documentation_1","title":"Documentation","text":""},{"location":"developer-guide/contributing/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>User Documentation: Getting started, tutorials, how-to guides</li> <li>API Reference: Detailed API documentation</li> <li>Developer Guide: Architecture, contributing guidelines</li> <li>Examples: Working examples and use cases</li> </ul>"},{"location":"developer-guide/contributing/#writing-documentation","title":"Writing Documentation","text":"<p>Use clear, concise language with practical examples:</p> <pre><code>## Command Usage\n\nThe `nodes list` command displays all available nodes:\n\n```bash\npython pyestro.py nodes list --filter \"web*\"\n</code></pre> <p>This command will: 1. Query the reclass inventory 2. Filter nodes matching the pattern 3. Display results in table format <pre><code>### Building Documentation\n\n```bash\n# Install documentation dependencies\npip install mkdocs mkdocs-material\n\n# Serve documentation locally\ncd docs/\nmkdocs serve\n\n# Build static documentation\nmkdocs build\n</code></pre></p>"},{"location":"developer-guide/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":""},{"location":"developer-guide/contributing/#before-submitting","title":"Before Submitting","text":"<ul> <li>[ ] Tests pass (<code>python -m pytest</code>)</li> <li>[ ] Code is formatted (<code>black</code>, <code>isort</code>)</li> <li>[ ] Type checking passes (<code>mypy</code>)</li> <li>[ ] Documentation is updated</li> <li>[ ] CHANGELOG.md is updated (if applicable)</li> </ul>"},{"location":"developer-guide/contributing/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Description\nBrief description of changes made.\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests added/updated\n- [ ] Manual testing performed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] Tests added for new functionality\n</code></pre>"},{"location":"developer-guide/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated Checks: CI/CD pipeline runs tests and checks</li> <li>Code Review: Maintainers review code quality and design</li> <li>Testing: Changes are tested in development environment</li> <li>Merge: PR is merged after approval</li> </ol>"},{"location":"developer-guide/contributing/#issue-guidelines","title":"Issue Guidelines","text":""},{"location":"developer-guide/contributing/#bug-reports","title":"Bug Reports","text":"<p>Use the bug report template:</p> <pre><code>## Bug Description\nClear description of the bug.\n\n## Steps to Reproduce\n1. Step one\n2. Step two\n3. Step three\n\n## Expected Behavior\nWhat should happen.\n\n## Actual Behavior\nWhat actually happens.\n\n## Environment\n- OS: [e.g., Ubuntu 20.04]\n- Python version: [e.g., 3.9.5]\n- Pyestro version: [e.g., 1.0.0]\n\n## Additional Context\nAny other relevant information.\n</code></pre>"},{"location":"developer-guide/contributing/#feature-requests","title":"Feature Requests","text":"<p>Use the feature request template:</p> <pre><code>## Feature Description\nClear description of the proposed feature.\n\n## Use Case\nWhy is this feature needed?\n\n## Proposed Solution\nHow should this feature work?\n\n## Alternatives Considered\nOther solutions you've considered.\n\n## Additional Context\nAny other relevant information.\n</code></pre>"},{"location":"developer-guide/contributing/#security","title":"Security","text":""},{"location":"developer-guide/contributing/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>Do not report security vulnerabilities through public GitHub issues. Instead:</p> <ol> <li>Email security issues to: security@pyestro.org</li> <li>Include \"SECURITY\" in the subject line</li> <li>Provide detailed description and steps to reproduce</li> </ol>"},{"location":"developer-guide/contributing/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Input Validation: Always validate and sanitize user inputs</li> <li>Path Traversal: Prevent directory traversal attacks</li> <li>Command Injection: Sanitize shell commands</li> <li>Secrets: Never commit secrets or credentials</li> <li>Dependencies: Keep dependencies updated</li> </ul>"},{"location":"developer-guide/contributing/#community","title":"Community","text":""},{"location":"developer-guide/contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and discussions</li> <li>Documentation: Primary reference material</li> </ul>"},{"location":"developer-guide/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive environment. Please:</p> <ul> <li>Use welcoming and inclusive language</li> <li>Respect differing viewpoints and experiences</li> <li>Accept constructive criticism gracefully</li> <li>Focus on what is best for the community</li> <li>Show empathy towards other community members</li> </ul>"},{"location":"developer-guide/contributing/#getting-help","title":"Getting Help","text":""},{"location":"developer-guide/contributing/#documentation_2","title":"Documentation","text":"<ul> <li>User Guide</li> <li>API Reference</li> <li>Architecture Guide</li> </ul>"},{"location":"developer-guide/contributing/#community-support","title":"Community Support","text":"<ul> <li>GitHub Issues for bugs and feature requests</li> <li>GitHub Discussions for questions and help</li> </ul>"},{"location":"developer-guide/contributing/#development-questions","title":"Development Questions","text":"<ul> <li>Review existing code and tests for examples</li> <li>Check the architecture documentation</li> <li>Ask questions in GitHub Discussions</li> </ul> <p>Thank you for contributing to Pyestro! \ud83c\udf89</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>This guide covers configuring Pyestro for your environment.</p>"},{"location":"getting-started/configuration/#configuration-file-format","title":"Configuration File Format","text":"<p>Pyestro uses JSON configuration files (YAML support planned). The main configuration file is <code>pyestro.json</code>.</p>"},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"/path/to/your/project\",\n        \"work_dir\": \"./workdir\",\n        \"dry_run\": true,\n        \"force\": false,\n        \"verbose\": 1\n    },\n    \"repositories\": {\n        \"common_inv\": \"https://github.com/yourorg/inventory.git\",\n        \"common_playbooks\": \"https://github.com/yourorg/playbooks.git\"\n    },\n    \"inventory\": {\n        \"main\": \"./inventory\"\n    },\n    \"playbooks\": {\n        \"common_playbooks\": \"./common_playbooks\"\n    },\n    \"ansible\": {\n        \"managed\": \"Ansible managed. All local changes will be lost!\",\n        \"timeout\": 60,\n        \"scp_if_ssh\": true,\n        \"galaxy_roles\": \".ansible-galaxy-roles\"\n    }\n}\n</code></pre>"},{"location":"getting-started/configuration/#configuration-sections","title":"Configuration Sections","text":""},{"location":"getting-started/configuration/#maestro-core-settings","title":"Maestro Core Settings","text":"Setting Type Default Description <code>project_dir</code> string <code>$PWD</code> Main project directory <code>work_dir</code> string <code>\"./workdir\"</code> Temporary working directory <code>dry_run</code> boolean <code>true</code> Default dry-run mode <code>force</code> boolean <code>false</code> Skip confirmation prompts <code>verbose</code> integer <code>1</code> Logging verbosity level"},{"location":"getting-started/configuration/#repository-configuration","title":"Repository Configuration","text":"<p>Define git repositories to clone and manage:</p> <pre><code>{\n    \"repositories\": {\n        \"maestro\": \"https://github.com/inofix/maestro\",\n        \"common_inv\": \"https://github.com/inofix/common-inv\",\n        \"common_playbooks\": \"https://github.com/zwischenloesung/common-playbooks\",\n        \"packer_templates\": \"https://github.com/yourorg/packer.git\",\n        \"vagrant_boxes\": \"https://github.com/yourorg/vagrant.git\"\n    }\n}\n</code></pre>"},{"location":"getting-started/configuration/#inventory-configuration","title":"Inventory Configuration","text":"<p>Map inventory sources:</p> <pre><code>{\n    \"inventory\": {\n        \"main\": \"./inventory\",\n        \"secondary\": \"./inventory2\"\n    }\n}\n</code></pre>"},{"location":"getting-started/configuration/#playbook-configuration","title":"Playbook Configuration","text":"<p>Define playbook directories:</p> <pre><code>{\n    \"playbooks\": {\n        \"common_playbooks\": \"./common_playbooks\",\n        \"custom_playbooks\": \"./playbooks\"\n    }\n}\n</code></pre>"},{"location":"getting-started/configuration/#ansible-settings","title":"Ansible Settings","text":"<p>Configure Ansible integration:</p> <pre><code>{\n    \"ansible\": {\n        \"managed\": \"Ansible managed. All local changes will be lost!\",\n        \"timeout\": 60,\n        \"scp_if_ssh\": true,\n        \"galaxy_roles\": \".ansible-galaxy-roles\",\n        \"config_file\": \"./ansible.cfg\"\n    }\n}\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> <pre><code>export PYESTRO_CONFIG=\"/path/to/custom/config.json\"\nexport PYESTRO_DRY_RUN=\"false\"\nexport PYESTRO_VERBOSE=\"2\"\n</code></pre>"},{"location":"getting-started/configuration/#migration-from-maestro","title":"Migration from Maestro","text":"<p>To migrate from the original bash Maestro:</p> <pre><code># Analyze existing configuration\npython pyestro.py migrate --analyze /path/to/.maestro\n\n# Convert configuration\npython pyestro.py migrate --convert /path/to/.maestro --output pyestro.json\n</code></pre>"},{"location":"getting-started/configuration/#example-migration","title":"Example Migration","text":"<p>Original <code>.maestro</code> file: <pre><code>maestrodir=\"/home/user/project\"\nworkdir=\"./workdir\"\ntoclone[\"common_inv\"]=\"https://github.com/example/inv.git\"\ninventorydirs[\"main\"]=\"./inventory\"\n</code></pre></p> <p>Converted <code>pyestro.json</code>: <pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"/home/user/project\",\n        \"work_dir\": \"./workdir\"\n    },\n    \"repositories\": {\n        \"common_inv\": \"https://github.com/example/inv.git\"\n    },\n    \"inventory\": {\n        \"main\": \"./inventory\"\n    }\n}\n</code></pre></p>"},{"location":"getting-started/configuration/#validation","title":"Validation","text":"<p>Validate your configuration:</p> <pre><code># Check configuration syntax\npython pyestro.py config validate\n\n# Show current configuration\npython pyestro.py config show\n</code></pre>"},{"location":"getting-started/configuration/#security-considerations","title":"Security Considerations","text":"<p>Sensitive Data</p> <ul> <li>Never commit authentication credentials to version control</li> <li>Use environment variables for sensitive configuration</li> <li>Consider using encrypted configuration for production</li> </ul>"},{"location":"getting-started/configuration/#example-secure-configuration","title":"Example Secure Configuration","text":"<pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"${PROJECT_DIR}\",\n        \"work_dir\": \"./workdir\"\n    },\n    \"repositories\": {\n        \"private_inv\": \"${PRIVATE_REPO_URL}\"\n    }\n}\n</code></pre> <p>With environment variables: <pre><code>export PROJECT_DIR=\"/secure/project/path\"\nexport PRIVATE_REPO_URL=\"git@github.com:yourorg/private-inv.git\"\n</code></pre></p>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get up and running</li> <li>Commands - Learn the CLI commands</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ - Pyestro requires Python 3.8 or later</li> <li>Git - For repository management</li> <li>Optional: reclass, Ansible (for full functionality)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<pre><code># Clone the repository\ngit clone https://github.com/yourname/pyestro.git\ncd pyestro\n\n# Create virtual environment (recommended)\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#using-pip-when-available","title":"Using pip (when available)","text":"<pre><code>pip install pyestro\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code># Check if Pyestro is working\npython pyestro.py --version\n\n# Run basic status check\npython pyestro.py status\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/installation/#reclass","title":"Reclass","text":"<p>For full inventory management functionality:</p> <pre><code>pip install reclass\n</code></pre>"},{"location":"getting-started/installation/#ansible","title":"Ansible","text":"<p>For configuration management features:</p> <pre><code>pip install ansible\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Configuration Setup</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>This guide will get you up and running with Pyestro in just a few minutes.</p>"},{"location":"getting-started/quickstart/#1-initialize-your-project","title":"1. Initialize Your Project","text":"<pre><code># Navigate to your project directory\ncd /path/to/your/project\n\n# Initialize Pyestro configuration\npython pyestro.py init\n</code></pre> <p>This creates: - <code>pyestro.json</code> - Main configuration file - <code>workdir/</code> - Temporary working directory - <code>.gitignore</code> - Git ignore patterns</p>"},{"location":"getting-started/quickstart/#2-configure-your-project","title":"2. Configure Your Project","text":"<p>Edit the generated <code>pyestro.json</code>:</p> <pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"/path/to/your/project\",\n        \"work_dir\": \"./workdir\",\n        \"dry_run\": true,\n        \"verbose\": 1\n    },\n    \"repositories\": {\n        \"common_inv\": \"https://github.com/yourorg/inventory.git\",\n        \"common_playbooks\": \"https://github.com/yourorg/playbooks.git\"\n    },\n    \"inventory\": {\n        \"main\": \"./inventory\"\n    }\n}\n</code></pre>"},{"location":"getting-started/quickstart/#3-setup-repositories","title":"3. Setup Repositories","text":"<pre><code># Download and setup required repositories\npython pyestro.py setup\n</code></pre> <p>This will: - Clone configured repositories - Set up inventory structure - Validate configuration</p>"},{"location":"getting-started/quickstart/#4-verify-your-setup","title":"4. Verify Your Setup","text":"<pre><code># Check project status\npython pyestro.py status\n\n# List available nodes (if inventory is configured)\npython pyestro.py nodes list\n\n# Show configuration\npython pyestro.py config show\n</code></pre>"},{"location":"getting-started/quickstart/#5-basic-operations","title":"5. Basic Operations","text":""},{"location":"getting-started/quickstart/#working-with-nodes","title":"Working with Nodes","text":"<pre><code># List all nodes\npython pyestro.py nodes list\n\n# Show details for a specific node\npython pyestro.py nodes show hostname.example.com\n\n# Filter nodes by class\npython pyestro.py nodes list --class webserver\n</code></pre>"},{"location":"getting-started/quickstart/#ansible-operations","title":"Ansible Operations","text":"<pre><code># Test connectivity to all nodes\npython pyestro.py ansible module ping\n\n# Execute a command on specific nodes\npython pyestro.py ansible module shell -a \"uptime\" --hosts web*\n\n# Run a playbook\npython pyestro.py ansible playbook site.yml --dry-run\n</code></pre>"},{"location":"getting-started/quickstart/#common-workflows","title":"Common Workflows","text":""},{"location":"getting-started/quickstart/#1-daily-operations","title":"1. Daily Operations","text":"<pre><code># Check project status\npython pyestro.py status\n\n# Update repositories\npython pyestro.py repos update\n\n# Test connectivity\npython pyestro.py ansible ping\n</code></pre>"},{"location":"getting-started/quickstart/#2-configuration-changes","title":"2. Configuration Changes","text":"<pre><code># Validate changes (dry run)\npython pyestro.py ansible playbook site.yml --dry-run\n\n# Apply changes\npython pyestro.py ansible playbook site.yml\n</code></pre>"},{"location":"getting-started/quickstart/#3-troubleshooting","title":"3. Troubleshooting","text":"<pre><code># Verbose output\npython pyestro.py --verbose 2 status\n\n# Check specific node\npython pyestro.py nodes show problematic-host.example.com\n\n# Test specific host connectivity\npython pyestro.py ansible module ping --hosts problematic-host.example.com\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>Command Reference - Complete command documentation</li> <li>User Guide - Advanced usage patterns</li> </ul>"},{"location":"reference/cli/","title":"CLI Reference","text":"<p>Complete command-line reference for Pyestro.</p> <p>Work in Progress</p> <p>This page is being developed. For now, see the Commands page for detailed command information.</p>"},{"location":"reference/cli/#command-index","title":"Command Index","text":""},{"location":"reference/cli/#core-commands","title":"Core Commands","text":"<ul> <li><code>init</code> - Initialize new project</li> <li><code>setup</code> - Setup repositories</li> <li><code>status</code> - Show project status</li> </ul>"},{"location":"reference/cli/#configuration","title":"Configuration","text":"<ul> <li><code>config show</code> - Display configuration</li> <li><code>config validate</code> - Validate configuration</li> </ul>"},{"location":"reference/cli/#node-management","title":"Node Management","text":"<ul> <li><code>nodes list</code> - List nodes</li> <li><code>nodes show</code> - Show node details</li> </ul>"},{"location":"reference/cli/#ansible-operations","title":"Ansible Operations","text":"<ul> <li><code>ansible module</code> - Execute modules</li> <li><code>ansible playbook</code> - Run playbooks</li> <li><code>ansible ping</code> - Test connectivity</li> </ul> <p>For detailed information, see the Commands Guide.</p>"},{"location":"reference/config-schema/","title":"Configuration Schema","text":"<p>Complete reference for Pyestro configuration options.</p>"},{"location":"reference/config-schema/#configuration-file-format","title":"Configuration File Format","text":"<p>Pyestro uses JSON configuration files with optional YAML support. The configuration follows a hierarchical structure with well-defined sections.</p>"},{"location":"reference/config-schema/#schema-overview","title":"Schema Overview","text":"<pre><code>{\n    \"maestro\": { ... },\n    \"repositories\": { ... },\n    \"inventory\": { ... },\n    \"playbooks\": { ... },\n    \"ansible\": { ... },\n    \"rsync\": { ... }\n}\n</code></pre>"},{"location":"reference/config-schema/#schema-specification","title":"Schema Specification","text":""},{"location":"reference/config-schema/#root-schema","title":"Root Schema","text":"Property Type Required Description <code>maestro</code> object Yes Core Pyestro settings <code>repositories</code> object No Git repository definitions <code>inventory</code> object No Reclass inventory configuration <code>playbooks</code> object No Ansible playbook directories <code>ansible</code> object No Ansible-specific settings <code>rsync</code> object No File synchronization options"},{"location":"reference/config-schema/#maestro-section","title":"Maestro Section","text":"<p>Core Pyestro configuration options.</p> <pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"/path/to/project\",\n        \"work_dir\": \"./workdir\",\n        \"dry_run\": true,\n        \"force\": false,\n        \"verbose\": 1\n    }\n}\n</code></pre> Property Type Default Description <code>project_dir</code> string <code>$PWD</code> Main project directory <code>work_dir</code> string <code>\"./workdir\"</code> Temporary working directory <code>dry_run</code> boolean <code>true</code> Default dry-run mode <code>force</code> boolean <code>false</code> Skip confirmation prompts <code>verbose</code> integer <code>1</code> Logging verbosity (0-3)"},{"location":"reference/config-schema/#repositories-section","title":"Repositories Section","text":"<p>Git repository configuration for cloning and management.</p> <pre><code>{\n    \"repositories\": {\n        \"maestro\": \"https://github.com/inofix/maestro\",\n        \"common_inv\": \"https://github.com/inofix/common-inv\",\n        \"common_playbooks\": \"https://github.com/zwischenloesung/common-playbooks\",\n        \"packer_templates\": \"https://github.com/yourorg/packer.git\",\n        \"vagrant_boxes\": \"https://github.com/yourorg/vagrant.git\"\n    }\n}\n</code></pre> Property Type Description <code>&lt;repo_name&gt;</code> string Git repository URL (HTTPS or SSH) <p>Supported URL formats: - HTTPS: <code>https://github.com/user/repo.git</code> - SSH: <code>git@github.com:user/repo.git</code> - Local: <code>/path/to/local/repo</code></p>"},{"location":"reference/config-schema/#inventory-section","title":"Inventory Section","text":"<p>Reclass inventory directory configuration.</p> <pre><code>{\n    \"inventory\": {\n        \"main\": \"./inventory\",\n        \"secondary\": \"./inventory2\",\n        \"common\": \"/shared/inventory\"\n    }\n}\n</code></pre> Property Type Description <code>&lt;inventory_name&gt;</code> string Path to reclass inventory directory <p>Directory Structure Expected: <pre><code>inventory/\n\u251c\u2500\u2500 classes/\n\u2502   \u251c\u2500\u2500 admin/\n\u2502   \u251c\u2500\u2500 location/\n\u2502   \u251c\u2500\u2500 project/\n\u2502   \u251c\u2500\u2500 role/\n\u2502   \u251c\u2500\u2500 service/\n\u2502   \u2514\u2500\u2500 app/\n\u2514\u2500\u2500 nodes/\n    \u251c\u2500\u2500 project1/\n    \u2514\u2500\u2500 project2/\n</code></pre></p>"},{"location":"reference/config-schema/#playbooks-section","title":"Playbooks Section","text":"<p>Ansible playbook directory configuration.</p> <pre><code>{\n    \"playbooks\": {\n        \"common_playbooks\": \"./common_playbooks\",\n        \"custom_playbooks\": \"./playbooks\",\n        \"roles\": \"./roles\"\n    }\n}\n</code></pre> Property Type Description <code>&lt;playbook_dir_name&gt;</code> string Path to playbook directory"},{"location":"reference/config-schema/#ansible-section","title":"Ansible Section","text":"<p>Ansible-specific configuration options.</p> <pre><code>{\n    \"ansible\": {\n        \"managed\": \"Ansible managed. All local changes will be lost!\",\n        \"timeout\": 60,\n        \"scp_if_ssh\": true,\n        \"galaxy_roles\": \".ansible-galaxy-roles\",\n        \"config_file\": \"./ansible.cfg\",\n        \"vault_password_file\": \"./vault_pass\",\n        \"private_key_file\": \"~/.ssh/id_rsa\"\n    }\n}\n</code></pre> Property Type Default Description <code>managed</code> string <code>\"Ansible managed...\"</code> Ansible managed file header <code>timeout</code> integer <code>60</code> SSH connection timeout (seconds) <code>scp_if_ssh</code> boolean <code>true</code> Use SCP for file transfer <code>galaxy_roles</code> string <code>\".ansible-galaxy-roles\"</code> Galaxy roles directory <code>config_file</code> string <code>\"./ansible.cfg\"</code> Ansible configuration file path <code>vault_password_file</code> string <code>null</code> Vault password file path <code>private_key_file</code> string <code>null</code> SSH private key file path"},{"location":"reference/config-schema/#rsync-section","title":"Rsync Section","text":"<p>File synchronization options using rsync.</p> <pre><code>{\n    \"rsync\": {\n        \"options\": \"-a -m --exclude=.keep\",\n        \"exclude_patterns\": [\".git\", \"*.pyc\", \"__pycache__\"],\n        \"dry_run_option\": \"--dry-run\",\n        \"verbose_option\": \"-v\"\n    }\n}\n</code></pre> Property Type Default Description <code>options</code> string <code>\"-a -m --exclude=.keep\"</code> Default rsync options <code>exclude_patterns</code> array <code>[]</code> Additional exclude patterns <code>dry_run_option</code> string <code>\"--dry-run\"</code> Dry-run flag for rsync <code>verbose_option</code> string <code>\"-v\"</code> Verbose flag for rsync"},{"location":"reference/config-schema/#complete-example","title":"Complete Example","text":"<pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"/home/user/infrastructure\",\n        \"work_dir\": \"./workdir\",\n        \"dry_run\": true,\n        \"force\": false,\n        \"verbose\": 2\n    },\n    \"repositories\": {\n        \"maestro\": \"https://github.com/inofix/maestro\",\n        \"common_inv\": \"git@github.com:company/common-inventory.git\",\n        \"common_playbooks\": \"https://github.com/company/ansible-playbooks.git\",\n        \"custom_roles\": \"/local/path/to/roles\"\n    },\n    \"inventory\": {\n        \"main\": \"./inventory\",\n        \"testing\": \"./test-inventory\"\n    },\n    \"playbooks\": {\n        \"common_playbooks\": \"./common_playbooks\",\n        \"site_playbooks\": \"./site-playbooks\"\n    },\n    \"ansible\": {\n        \"managed\": \"This file is managed by Pyestro - do not edit manually!\",\n        \"timeout\": 120,\n        \"scp_if_ssh\": true,\n        \"galaxy_roles\": \".ansible-galaxy-roles\",\n        \"config_file\": \"./ansible.cfg\",\n        \"vault_password_file\": \"./vault_pass.txt\"\n    },\n    \"rsync\": {\n        \"options\": \"-a -m --exclude=.keep --exclude=*.tmp\",\n        \"exclude_patterns\": [\n            \".git\",\n            \"*.pyc\",\n            \"__pycache__\",\n            \"*.log\"\n        ]\n    }\n}\n</code></pre>"},{"location":"reference/config-schema/#environment-variable-overrides","title":"Environment Variable Overrides","text":"<p>Configuration values can be overridden using environment variables:</p> Environment Variable Configuration Path Type <code>PYESTRO_CONFIG</code> N/A Configuration file path <code>PYESTRO_PROJECT_DIR</code> <code>maestro.project_dir</code> string <code>PYESTRO_WORK_DIR</code> <code>maestro.work_dir</code> string <code>PYESTRO_DRY_RUN</code> <code>maestro.dry_run</code> boolean <code>PYESTRO_FORCE</code> <code>maestro.force</code> boolean <code>PYESTRO_VERBOSE</code> <code>maestro.verbose</code> integer <p>Example: <pre><code>export PYESTRO_DRY_RUN=false\nexport PYESTRO_VERBOSE=3\npython pyestro.py status\n</code></pre></p>"},{"location":"reference/config-schema/#configuration-validation","title":"Configuration Validation","text":""},{"location":"reference/config-schema/#json-schema-validation","title":"JSON Schema Validation","text":"<p>Pyestro validates configuration against a JSON schema. Common validation errors:</p>"},{"location":"reference/config-schema/#invalid-type","title":"Invalid Type","text":"<p><pre><code>{\n    \"maestro\": {\n        \"verbose\": \"high\"  // Should be integer\n    }\n}\n</code></pre> Error: <code>verbose must be an integer between 0 and 3</code></p>"},{"location":"reference/config-schema/#missing-required-property","title":"Missing Required Property","text":"<p><pre><code>{\n    \"repositories\": {\n        \"common_inv\": \"https://github.com/example/inv.git\"\n    }\n    // Missing maestro section\n}\n</code></pre> Error: <code>maestro section is required</code></p>"},{"location":"reference/config-schema/#invalid-path","title":"Invalid Path","text":"<p><pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"../../../etc/passwd\"  // Path traversal attempt\n    }\n}\n</code></pre> Error: <code>project_dir contains invalid path components</code></p>"},{"location":"reference/config-schema/#validation-commands","title":"Validation Commands","text":"<pre><code># Validate current configuration\npython pyestro.py config validate\n\n# Validate specific file\npython pyestro.py config validate --file custom.json\n\n# Strict validation (additional checks)\npython pyestro.py config validate --strict\n</code></pre>"},{"location":"reference/config-schema/#configuration-migration","title":"Configuration Migration","text":""},{"location":"reference/config-schema/#from-bash-maestro","title":"From Bash Maestro","text":"<p>Original <code>.maestro</code> format: <pre><code>maestrodir=\"/home/user/project\"\nworkdir=\"./workdir\"\ntoclone[\"common_inv\"]=\"https://github.com/example/inv.git\"\ninventorydirs[\"main\"]=\"./inventory\"\nansible_timeout=\"60\"\n</code></pre></p> <p>Equivalent <code>pyestro.json</code>: <pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"/home/user/project\",\n        \"work_dir\": \"./workdir\"\n    },\n    \"repositories\": {\n        \"common_inv\": \"https://github.com/example/inv.git\"\n    },\n    \"inventory\": {\n        \"main\": \"./inventory\"\n    },\n    \"ansible\": {\n        \"timeout\": 60\n    }\n}\n</code></pre></p>"},{"location":"reference/config-schema/#migration-command","title":"Migration Command","text":"<pre><code>python pyestro.py migrate --from .maestro --to pyestro.json\n</code></pre>"},{"location":"reference/config-schema/#yaml-support-planned","title":"YAML Support (Planned)","text":"<p>Future versions will support YAML configuration:</p> <pre><code>maestro:\n  project_dir: /home/user/infrastructure\n  work_dir: ./workdir\n  dry_run: true\n  verbose: 2\n\nrepositories:\n  common_inv: git@github.com:company/inventory.git\n  playbooks: https://github.com/company/playbooks.git\n\ninventory:\n  main: ./inventory\n  testing: ./test-inventory\n\nansible:\n  timeout: 120\n  galaxy_roles: .ansible-galaxy-roles\n</code></pre>"},{"location":"reference/config-schema/#security-considerations","title":"Security Considerations","text":""},{"location":"reference/config-schema/#sensitive-data","title":"Sensitive Data","text":"<p>Sensitive Information</p> <p>Never commit sensitive data to version control: - SSH private keys - Vault passwords - API tokens - Database credentials</p>"},{"location":"reference/config-schema/#best-practices","title":"Best Practices","text":"<ol> <li>Use Environment Variables for sensitive data</li> <li>File Permissions - Restrict config file access (600)</li> <li>Path Validation - All paths are validated for security</li> <li>URL Validation - Repository URLs are validated</li> </ol>"},{"location":"reference/config-schema/#example-secure-configuration","title":"Example Secure Configuration","text":"<pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"${PROJECT_DIR}\"\n    },\n    \"repositories\": {\n        \"private_inv\": \"${PRIVATE_REPO_URL}\"\n    },\n    \"ansible\": {\n        \"vault_password_file\": \"${VAULT_PASSWORD_FILE}\",\n        \"private_key_file\": \"${SSH_KEY_FILE}\"\n    }\n}\n</code></pre> <p>With environment file (<code>.env</code>): <pre><code>PROJECT_DIR=/secure/project/path\nPRIVATE_REPO_URL=git@github.com:company/private-inv.git\nVAULT_PASSWORD_FILE=/secure/vault_pass\nSSH_KEY_FILE=/secure/ssh_key\n</code></pre></p>"},{"location":"reference/config-schema/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/config-schema/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"reference/config-schema/#issue-configuration-file-not-found","title":"Issue: Configuration file not found","text":"<p>Solution: Ensure file exists and use absolute path</p>"},{"location":"reference/config-schema/#issue-invalid-json-syntax","title":"Issue: Invalid JSON syntax","text":"<p>Solution: Validate JSON syntax using online validator</p>"},{"location":"reference/config-schema/#issue-permission-denied","title":"Issue: Permission denied","text":"<p>Solution: Check file permissions and ownership</p>"},{"location":"reference/config-schema/#issue-repository-clone-fails","title":"Issue: Repository clone fails","text":"<p>Solution: Verify repository URL and SSH key access</p> <p>For more help, see: - Getting Started - Migration Guide - CLI Reference</p>"},{"location":"reference/maestro-spec/","title":"Original Maestro Specification","text":"<p>This document provides a comprehensive specification of the original bash-based Maestro configuration management orchestrator, which serves as the foundation for the modern Python-based Pyestro implementation.</p>"},{"location":"reference/maestro-spec/#overview","title":"Overview","text":"<p>Maestro is a bash-based configuration management orchestrator that provides a unified interface for managing heterogeneous infrastructure environments. Originally developed to bridge the gap between metadata stored in reclass and various configuration management tools, primarily Ansible.</p>"},{"location":"reference/maestro-spec/#project-background","title":"Project Background","text":""},{"location":"reference/maestro-spec/#historical-context","title":"Historical Context","text":"<ul> <li>Origin: Started with cfengine automation</li> <li>Evolution: Moved through various CM tools (cfengine, ansible, salt, debops)</li> <li>Challenge: Different customers using different CM systems</li> <li>Solution: Unified orchestrator using reclass as common knowledge base</li> </ul>"},{"location":"reference/maestro-spec/#philosophy","title":"Philosophy","text":"<p>\"The central idea behind maestro is to build a knowledge base (CMDB) that can be used by several configuration management tools. It must be flexible enough to be split up as needed and simple enough such that one can work on several projects without having to think too much.\"</p>"},{"location":"reference/maestro-spec/#architecture","title":"Architecture","text":""},{"location":"reference/maestro-spec/#three-layer-design","title":"Three-Layer Design","text":"<pre><code>BACKEND0 (meta-data):              BACKEND1 (concrete-data):\n    ,---------.                         ,---------.\n   |`----------'--.                    |`----------'--.\n   |  reclass0 |---'--.                |  confix0  |---'--.\n   |           |s1 |---'               |           |1  |---'&lt;--.\n    `---------'    |.. |                `---------'    |.. |   |\n        `---------'    |                    `---------'    |   |\n            \\---------'                     /   `---------'    |\n              \\| _______________________  |/                   |\n               ,'                       `.                     |\nCONNECTOR:    (       m a e s t r o       )                    |\n               `._______________________,'\\                    |\n                  /     /      |   _        \\                  |\n                 V     V   _   V  |C| ____    \\                |\n             __________   | | ___ |F||Temp|     \\              |\n            (=========='  |d||   ||E||late|       \\            |\nCONFIGURATION    |\\ Ansible |  |e|| S ||n||    |        |(plain     |\nMANAGEMENT:      || \\       |  |b|| a ||g|| j2 | _____  | files)   /\n                ||  |~~~~~ |  |o|| l ||i|| .. || ... | |        /\n                ||  |~~~~~ |  |p|| t ||n||    || ... | |      /\n                ||  |~~~~~ |  |s||   ||e||    || ... | |    /\n                (|  |______| .|_||___||_||____||_____| |  /\n                 \\  |                                /  /\n                   \\| |      |      |  |   |       /  /\n                      |      |      |  |   |     /  /\n                      V      V      V  V   V    V /\n    MACHINES:     [ host0 ][ host1 ] ... [ hostN ]\n</code></pre>"},{"location":"reference/maestro-spec/#core-components","title":"Core Components","text":""},{"location":"reference/maestro-spec/#1-configuration-system","title":"1. Configuration System","text":"<ul> <li>Format: Bash configuration file (<code>.maestro</code>)</li> <li>Hierarchy: System \u2192 Global \u2192 User \u2192 Local \u2192 Command-line</li> <li>Location Precedence:</li> <li><code>/etc/maestro</code></li> <li><code>/usr/etc/maestro</code></li> <li><code>/usr/local/etc/maestro</code></li> <li><code>~/.maestro</code></li> <li><code>./maestro</code> or <code>./.maestro</code></li> <li>Command-line specified config</li> </ul>"},{"location":"reference/maestro-spec/#2-repository-management","title":"2. Repository Management","text":"<ul> <li>Git Integration: Clone and manage multiple repositories</li> <li>Repository Types:</li> <li><code>maestro</code> - The orchestrator itself</li> <li><code>common_inv</code> - Common inventory/metadata</li> <li><code>common_playbooks</code> - Shared Ansible playbooks</li> <li><code>packer_templates</code> - Infrastructure templates</li> <li><code>vagrant_boxes</code> - Development environments</li> </ul>"},{"location":"reference/maestro-spec/#3-reclass-integration","title":"3. Reclass Integration","text":"<ul> <li>Knowledge Base: Primary metadata backend</li> <li>Inventory Management: Merged inventory in <code>.inventory/</code></li> <li>Node Processing: AWK-based parsing of reclass output</li> <li>Class Organization: Hierarchical class structure</li> </ul>"},{"location":"reference/maestro-spec/#4-ansible-integration","title":"4. Ansible Integration","text":"<ul> <li>Module Execution: Direct ansible module calls</li> <li>Playbook Management: Discover and execute playbooks</li> <li>Galaxy Support: Role management</li> <li>Configuration: Dynamic ansible.cfg generation</li> </ul>"},{"location":"reference/maestro-spec/#command-interface","title":"Command Interface","text":""},{"location":"reference/maestro-spec/#primary-commands","title":"Primary Commands","text":""},{"location":"reference/maestro-spec/#initialization-and-setup","title":"Initialization and Setup","text":"<pre><code># Initialize environment with all defined repos\nmaestro.sh init\n\n# Update reclass environment without pulling repos\nmaestro.sh reinit\n</code></pre>"},{"location":"reference/maestro-spec/#node-and-class-management","title":"Node and Class Management","text":"<pre><code># List hosts sorted by applications\nmaestro.sh applications-list [app]\nmaestro.sh als [app]\n\n# List hosts sorted by class\nmaestro.sh classes-list [class]\nmaestro.sh cls [class]\n\n# List all nodes\nmaestro.sh nodes-list\nmaestro.sh nls\n\n# Show node details\nmaestro.sh node-show nodename\nmaestro.sh ns nodename\n</code></pre>"},{"location":"reference/maestro-spec/#ansible-operations","title":"Ansible Operations","text":"<pre><code># Execute ansible module\nmaestro.sh ansible-module module [args] [vars] [options]\nmaestro.sh ansible module [args] [vars] [options]\n\n# Run playbook\nmaestro.sh ansible-play playbook [vars] [options]\nmaestro.sh play playbook [vars] [options]\n\n# Loop playbook with items\nmaestro.sh ansible-play-loop playbook itemkey=val1:val2 [vars] [options]\nmaestro.sh ploop playbook itemkey=val1:val2 [vars] [options]\n\n# List available playbooks\nmaestro.sh ansible-plays-list [play]\nmaestro.sh pls [play]\n</code></pre>"},{"location":"reference/maestro-spec/#file-operations","title":"File Operations","text":"<pre><code># Merge files from storage to workdir\nmaestro.sh merge [subdir] [rsync-options]\nmaestro.sh mg [subdir] [rsync-options]\n\n# Unmerge files from workdir back to storage\nmaestro.sh unmerge [subdir] [rsync-options]\nmaestro.sh umg [subdir] [rsync-options]\n</code></pre>"},{"location":"reference/maestro-spec/#search-operations","title":"Search Operations","text":"<pre><code># Search for parameter across inventory\nmaestro.sh search pattern\n\n# Search for class references\nmaestro.sh search-class classpattern\n\n# Search in playbooks\nmaestro.sh search-in-playbooks pattern\n\n# Search external variables\nmaestro.sh search-external pattern\n\n# Search reclass variables\nmaestro.sh search-reclass pattern\n</code></pre>"},{"location":"reference/maestro-spec/#status-and-information","title":"Status and Information","text":"<pre><code># Test host connectivity and show system info\nmaestro.sh status\nmaestro.sh ss\n\n# Show help\nmaestro.sh help\n</code></pre>"},{"location":"reference/maestro-spec/#command-line-options","title":"Command-Line Options","text":""},{"location":"reference/maestro-spec/#filtering-options","title":"Filtering Options","text":"<pre><code># Filter by class\n-C, --class CLASS\n\n# Filter by host/node\n-H, --host HOST\n-N, --node NODE\n\n# Filter by project\n-P, --project PROJECT\n</code></pre>"},{"location":"reference/maestro-spec/#execution-options","title":"Execution Options","text":"<pre><code># Dry run mode\n-n, --dry-run\n\n# Force execution without prompts\n-f, --force\n\n# Interactive mode (ask before changes)\n-i, --interactive\n\n# Parser test mode\n-p, --parser-test\n\n# Verbose output\n-v, --verbose [level]\n\n# Quiet mode\n-q, --quiet\n\n# Custom work directory\n-w, --workdir DIRECTORY\n</code></pre>"},{"location":"reference/maestro-spec/#configuration-options","title":"Configuration Options","text":"<pre><code># Alternative config file\n-c, --config CONFFILE\n\n# Show version\n-V, --version\n\n# Show help\n-h, --help\n</code></pre>"},{"location":"reference/maestro-spec/#configuration-schema","title":"Configuration Schema","text":""},{"location":"reference/maestro-spec/#core-configuration-variables","title":"Core Configuration Variables","text":""},{"location":"reference/maestro-spec/#project-settings","title":"Project Settings","text":"<pre><code># Maestro's project directory\nmaestrodir=\"$PWD\"\n\n# Repository directory name\nmaestro_repo_dir_name=\"maestro\"\nmaestro_repo_dir=\"$maestrodir/$maestro_repo_dir_name\"\n\n# Working directory\nworkdir=\"./workdir\"\n\n# Execution modes\nforce=1          # 0=force, 1=interactive\ndryrun=1         # 0=dry-run, 1=execute\nneedsroot=1      # Whether root privileges needed\nverbose=\"1\"      # Verbosity level\n</code></pre>"},{"location":"reference/maestro-spec/#repository-configuration","title":"Repository Configuration","text":"<pre><code># Repositories to clone\ndeclare -A toclone\ntoclone=(\n    [\"maestro\"]=\"https://github.com/inofix/maestro\"\n    [\"common_inv\"]=\"https://github.com/inofix/common-inv\"\n    [\"common_playbooks\"]=\"https://github.com/zwischenloesung/common-playbooks\"\n)\n</code></pre>"},{"location":"reference/maestro-spec/#directory-mappings","title":"Directory Mappings","text":"<pre><code># Reclass inventory sources\ndeclare -A inventorydirs\ninventorydirs=(\n    [\"main\"]=\"./inventory\"\n)\n\n# Ansible playbook directories\ndeclare -A playbookdirs\nplaybookdirs=(\n    [\"common_playbooks\"]=\"./common_playbooks\"\n)\n\n# Additional local directories\ndeclare -A localdirs\nlocaldirs=(\n    [\"packer_templates\"]=\"./packer_templates\"\n    [\"vagrant_boxes\"]=\"./vagrant_boxes\"\n)\n</code></pre>"},{"location":"reference/maestro-spec/#ansible-configuration","title":"Ansible Configuration","text":"<pre><code># Ansible defaults\nansible_managed=\"Ansible managed. All local changes will be lost!\"\nansible_timeout=\"60\"\nansible_scp_if_ssh=\"True\"\nansible_galaxy_roles=\".ansible-galaxy-roles\"\nansible_config_default=\"$maestrodir/ansible.cfg\"\n\n# Galaxy roles file\ngalaxyroles=\"galaxy/roles.yml\"\n\n# Connection script\nansible_connect=\"$maestro_repo_dir/reclass-ansible.sh\"\n\n# Additional options\nansibleoptions=\"\"\n</code></pre>"},{"location":"reference/maestro-spec/#migration-from-maestro-to-pyestro","title":"Migration from Maestro to Pyestro","text":""},{"location":"reference/maestro-spec/#key-differences","title":"Key Differences","text":"Aspect Original Maestro Pyestro Language Bash + AWK Python 3.8+ Configuration <code>.maestro</code> file JSON/YAML Parsing AWK scripts Python libraries Error Handling Basic Comprehensive Testing Manual Unit tests Security Basic Enhanced validation Performance Sequential Potential parallelization"},{"location":"reference/maestro-spec/#migration-path","title":"Migration Path","text":"<ol> <li> <p>Configuration Conversion <pre><code># Original\nmaestrodir=\"/path/to/project\"\ntoclone[\"common_inv\"]=\"https://github.com/example/inv.git\"\n\n# Pyestro equivalent\n{\n  \"maestro\": {\"project_dir\": \"/path/to/project\"},\n  \"repositories\": {\"common_inv\": \"https://github.com/example/inv.git\"}\n}\n</code></pre></p> </li> <li> <p>Command Mapping <pre><code># Original Maestro\nmaestro.sh nodes-list --class webserver\nmaestro.sh ansible-module ping\nmaestro.sh ansible-play site.yml\n\n# Pyestro equivalent\npython pyestro.py nodes list --class webserver\npython pyestro.py ansible module ping\npython pyestro.py ansible playbook site.yml\n</code></pre></p> </li> <li> <p>Feature Enhancement</p> </li> <li>Enhanced search capabilities</li> <li>Better error messages</li> <li>Structured logging</li> <li>Input validation</li> <li>Dry-run improvements</li> </ol>"},{"location":"reference/maestro-spec/#compatibility-considerations","title":"Compatibility Considerations","text":"<p>Breaking Changes</p> <ul> <li>Configuration file format changed from bash to JSON/YAML</li> <li>Command syntax slightly different</li> <li>Some advanced AWK parsing may need adjustment</li> <li>Error output format changed</li> </ul> <p>Preserved Features</p> <ul> <li>Core workflow unchanged</li> <li>Reclass integration compatible</li> <li>Ansible integration compatible</li> <li>Repository management logic preserved</li> </ul>"},{"location":"reference/maestro-spec/#technical-implementation-details","title":"Technical Implementation Details","text":""},{"location":"reference/maestro-spec/#awk-parser-original","title":"AWK Parser (Original)","text":"<p>The original Maestro used complex AWK scripts for parsing reclass JSON output:</p> <pre><code># Example AWK parser snippet\nBEGIN {\n    split(target_var, target_vars, \":\")\n    spaces=\"  \"\n    i=1\n    target=\"^\"spaces\"\"target_vars[i]\":\"\n    deeper=\"^\"spaces\"[ -] \"\n}\n/^parameters:$/ {\n    mode=\"param\"\n    next\n}\n# ... complex parsing logic\n</code></pre>"},{"location":"reference/maestro-spec/#python-implementation-pyestro","title":"Python Implementation (Pyestro)","text":"<p>Pyestro replaces AWK with Python JSON parsing:</p> <pre><code>import json\nimport subprocess\n\ndef get_node_data(node_name):\n    result = subprocess.run([\n        \"reclass\", \"-b\", inventory_dir, \n        \"-n\", node_name, \"--output\", \"json\"\n    ], capture_output=True, text=True)\n    return json.loads(result.stdout)\n</code></pre>"},{"location":"reference/maestro-spec/#known-limitations-of-original-maestro","title":"Known Limitations of Original Maestro","text":""},{"location":"reference/maestro-spec/#technical-limitations","title":"Technical Limitations","text":"<ul> <li>AWK Complexity: Complex parsing logic difficult to maintain</li> <li>Error Handling: Limited error recovery capabilities  </li> <li>Parallelization: No concurrent operations support</li> <li>Memory Usage: Large inventories may cause issues</li> <li>Platform Support: Unix/Linux only</li> </ul>"},{"location":"reference/maestro-spec/#functional-limitations","title":"Functional Limitations","text":"<ul> <li>Search Capabilities: Basic pattern matching only</li> <li>Validation: Limited input validation</li> <li>Logging: No structured logging</li> <li>Configuration: Limited configuration validation</li> <li>Security: Basic input sanitization</li> </ul>"},{"location":"reference/maestro-spec/#conclusion","title":"Conclusion","text":"<p>The original Maestro represents a practical solution to multi-environment configuration management challenges. While functional, its bash/AWK implementation presents maintenance and scalability challenges that the Python-based Pyestro project aims to address while preserving the core architectural concepts and workflows that make Maestro effective.</p>"},{"location":"reference/maestro-spec/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Proven Architecture: The three-layer architecture works well in practice</li> <li>Reclass Integration: Using reclass as a knowledge base is effective</li> <li>Unified Interface: Single tool for multiple CM systems reduces complexity</li> <li>Evolution Need: Modern implementation needed for maintainability and features</li> </ol>"},{"location":"reference/maestro-spec/#next-steps","title":"Next Steps","text":"<ul> <li>Review Pyestro Specification for the modern implementation</li> <li>See Migration Guide for transitioning from Maestro to Pyestro</li> <li>Check Command Reference for Pyestro command syntax</li> </ul>"},{"location":"reference/migration/","title":"Migration Guide","text":"<p>Guide for migrating from the original bash Maestro to Python Pyestro.</p>"},{"location":"reference/migration/#overview","title":"Overview","text":"<p>This guide helps you migrate from the original bash-based Maestro to the modern Python-based Pyestro implementation.</p>"},{"location":"reference/migration/#migration-steps","title":"Migration Steps","text":""},{"location":"reference/migration/#1-analyze-existing-configuration","title":"1. Analyze Existing Configuration","text":"<p>First, analyze your current <code>.maestro</code> configuration:</p> <pre><code>python pyestro.py migrate --analyze /path/to/.maestro\n</code></pre>"},{"location":"reference/migration/#2-convert-configuration","title":"2. Convert Configuration","text":"<p>Convert your bash configuration to JSON:</p> <pre><code>python pyestro.py migrate --convert /path/to/.maestro --output pyestro.json\n</code></pre>"},{"location":"reference/migration/#3-validate-new-configuration","title":"3. Validate New Configuration","text":"<p>Validate the converted configuration:</p> <pre><code>python pyestro.py config validate\n</code></pre>"},{"location":"reference/migration/#4-test-basic-operations","title":"4. Test Basic Operations","text":"<p>Test that basic operations work:</p> <pre><code>python pyestro.py status\npython pyestro.py nodes list\n</code></pre>"},{"location":"reference/migration/#command-mapping","title":"Command Mapping","text":"Original Maestro Pyestro Equivalent Notes <code>maestro.sh init</code> <code>python pyestro.py init</code> Similar functionality <code>maestro.sh nodes-list</code> <code>python pyestro.py nodes list</code> Enhanced filtering <code>maestro.sh ansible-module ping</code> <code>python pyestro.py ansible module ping</code> Same module support <code>maestro.sh ansible-play site.yml</code> <code>python pyestro.py ansible playbook site.yml</code> Enhanced options <code>maestro.sh status</code> <code>python pyestro.py status</code> More detailed output"},{"location":"reference/migration/#configuration-changes","title":"Configuration Changes","text":""},{"location":"reference/migration/#bash-maestro-format","title":"Bash (.maestro) Format","text":"<pre><code>maestrodir=\"/path/to/project\"\nworkdir=\"./workdir\"\ntoclone[\"common_inv\"]=\"https://github.com/example/inv.git\"\ninventorydirs[\"main\"]=\"./inventory\"\n</code></pre>"},{"location":"reference/migration/#json-pyestrojson-format","title":"JSON (pyestro.json) Format","text":"<pre><code>{\n    \"maestro\": {\n        \"project_dir\": \"/path/to/project\",\n        \"work_dir\": \"./workdir\"\n    },\n    \"repositories\": {\n        \"common_inv\": \"https://github.com/example/inv.git\"\n    },\n    \"inventory\": {\n        \"main\": \"./inventory\"\n    }\n}\n</code></pre>"},{"location":"reference/migration/#common-issues","title":"Common Issues","text":""},{"location":"reference/migration/#issue-command-not-found","title":"Issue: Command not found","text":"<p>Problem: <code>python pyestro.py</code> not working Solution: Ensure you're in the correct directory and Python environment</p>"},{"location":"reference/migration/#issue-configuration-errors","title":"Issue: Configuration errors","text":"<p>Problem: Invalid configuration after migration Solution: Use <code>python pyestro.py config validate</code> to identify issues</p>"},{"location":"reference/migration/#issue-missing-repositories","title":"Issue: Missing repositories","text":"<p>Problem: Repositories not cloned Solution: Run <code>python pyestro.py setup</code> after migration</p>"},{"location":"reference/migration/#benefits-of-migration","title":"Benefits of Migration","text":"<ul> <li>Better Error Handling: More informative error messages</li> <li>Enhanced Security: Input validation and sanitization</li> <li>Improved Performance: Python optimizations</li> <li>Modern Features: JSON/YAML configuration, structured logging</li> <li>Maintainability: Cleaner codebase, unit tests</li> </ul>"},{"location":"reference/migration/#getting-help","title":"Getting Help","text":"<ul> <li>See Commands for detailed command information</li> <li>Check Configuration for setup help</li> <li>Review Original Maestro Spec for comparison</li> </ul>"},{"location":"user-guide/ansible/","title":"Ansible Integration","text":"<p>Advanced Ansible usage with Pyestro.</p>"},{"location":"user-guide/ansible/#overview","title":"Overview","text":"<p>Pyestro provides deep integration with Ansible, allowing you to execute modules, run playbooks, and manage Galaxy roles seamlessly.</p>"},{"location":"user-guide/ansible/#module-execution","title":"Module Execution","text":""},{"location":"user-guide/ansible/#basic-module-usage","title":"Basic Module Usage","text":"<pre><code># Ping all hosts\npython pyestro.py ansible module ping\n\n# Get system facts\npython pyestro.py ansible module setup\n\n# Run shell commands\npython pyestro.py ansible module shell --args \"uptime\"\n</code></pre>"},{"location":"user-guide/ansible/#targeting-specific-hosts","title":"Targeting Specific Hosts","text":"<pre><code># Target specific hosts\npython pyestro.py ansible module ping --hosts \"web*\"\n\n# Use complex patterns\npython pyestro.py ansible module shell --args \"df -h\" --hosts \"web01,db*\"\n\n# Target by class (via reclass)\npython pyestro.py ansible module ping --hosts \"@webserver\"\n</code></pre>"},{"location":"user-guide/ansible/#module-arguments","title":"Module Arguments","text":"<pre><code># Service management\npython pyestro.py ansible module service --args \"name=nginx state=started\"\n\n# File operations\npython pyestro.py ansible module copy --args \"src=/tmp/file dest=/etc/file\"\n\n# Package management\npython pyestro.py ansible module package --args \"name=nginx state=present\"\n</code></pre>"},{"location":"user-guide/ansible/#playbook-management","title":"Playbook Management","text":""},{"location":"user-guide/ansible/#running-playbooks","title":"Running Playbooks","text":"<pre><code># Run a playbook\npython pyestro.py ansible playbook site.yml\n\n# Dry-run mode\npython pyestro.py ansible playbook site.yml --dry-run\n\n# Target specific hosts\npython pyestro.py ansible playbook deploy.yml --hosts \"staging\"\n</code></pre>"},{"location":"user-guide/ansible/#playbook-variables","title":"Playbook Variables","text":"<pre><code># Pass variables\npython pyestro.py ansible playbook deploy.yml --vars version=1.2.3\n\n# Multiple variables\npython pyestro.py ansible playbook site.yml --vars \"env=prod debug=false\"\n</code></pre>"},{"location":"user-guide/ansible/#tags-and-limits","title":"Tags and Limits","text":"<pre><code># Run specific tags\npython pyestro.py ansible playbook site.yml --tags \"nginx,ssl\"\n\n# Skip tags\npython pyestro.py ansible playbook site.yml --skip-tags \"slow\"\n\n# Limit to specific hosts\npython pyestro.py ansible playbook site.yml --limit \"web*\"\n</code></pre>"},{"location":"user-guide/ansible/#listing-playbooks","title":"Listing Playbooks","text":"<pre><code># List available playbooks\npython pyestro.py ansible list-playbooks\n\n# Show playbook details\npython pyestro.py ansible list-playbooks --details\n</code></pre>"},{"location":"user-guide/ansible/#galaxy-role-management","title":"Galaxy Role Management","text":""},{"location":"user-guide/ansible/#installing-roles","title":"Installing Roles","text":"<pre><code># Install from requirements file\npython pyestro.py ansible galaxy-install\n\n# Force reinstall\npython pyestro.py ansible galaxy-install --force\n\n# Custom requirements file\npython pyestro.py ansible galaxy-install --requirements custom-requirements.yml\n</code></pre>"},{"location":"user-guide/ansible/#requirements-file-format","title":"Requirements File Format","text":"<pre><code># requirements.yml\n- name: geerlingguy.nginx\n  version: \"2.8.0\"\n\n- name: community.mysql\n  version: \"&gt;=1.0.0\"\n\n- src: https://github.com/custom/role.git\n  name: custom-role\n  version: main\n</code></pre>"},{"location":"user-guide/ansible/#configuration-generation","title":"Configuration Generation","text":"<p>Pyestro can generate Ansible configuration files:</p> <pre><code># Generate ansible.cfg\npython pyestro.py ansible config-generate\n</code></pre> <p>Example generated <code>ansible.cfg</code>: <pre><code>[defaults]\ninventory = ./.inventory/reclass\nhost_key_checking = False\ntimeout = 60\nansible_managed = Ansible managed. All local changes will be lost!\n\n[ssh_connection]\nscp_if_ssh = True\n</code></pre></p>"},{"location":"user-guide/ansible/#host-patterns","title":"Host Patterns","text":"<p>Pyestro supports various host pattern formats:</p>"},{"location":"user-guide/ansible/#simple-patterns","title":"Simple Patterns","text":"<pre><code># Single host\n--hosts \"web01.example.com\"\n\n# Wildcard\n--hosts \"web*\"\n\n# Multiple hosts\n--hosts \"web01,web02,db01\"\n</code></pre>"},{"location":"user-guide/ansible/#reclass-integration","title":"Reclass Integration","text":"<pre><code># All nodes with a class\n--hosts \"@webserver\"\n\n# Nodes with multiple classes\n--hosts \"@webserver:@nginx\"\n\n# Project-based filtering\n--hosts \"project:ecommerce\"\n</code></pre>"},{"location":"user-guide/ansible/#complex-patterns","title":"Complex Patterns","text":"<pre><code># Intersection\n--hosts \"webserver:&amp;production\"\n\n# Exclusion\n--hosts \"all:!staging\"\n\n# Combination\n--hosts \"webserver:!web01:&amp;production\"\n</code></pre>"},{"location":"user-guide/ansible/#connectivity-testing","title":"Connectivity Testing","text":""},{"location":"user-guide/ansible/#basic-connectivity","title":"Basic Connectivity","text":"<pre><code># Test all hosts\npython pyestro.py ansible ping\n\n# Test specific hosts\npython pyestro.py ansible ping --hosts \"production\"\n\n# Verbose output\npython pyestro.py ansible ping --verbose\n</code></pre>"},{"location":"user-guide/ansible/#advanced-testing","title":"Advanced Testing","text":"<pre><code># Test with timeout\npython pyestro.py ansible module ping --args \"timeout=30\"\n\n# Test with custom user\npython pyestro.py ansible module ping --vars ansible_user=deploy\n\n# Test SSH keys\npython pyestro.py ansible module shell --args \"ssh-add -l\"\n</code></pre>"},{"location":"user-guide/ansible/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/ansible/#common-issues","title":"Common Issues","text":"<p>Issue: <code>Connection timeout</code> Solution: Check SSH connectivity and firewall rules</p> <p>Issue: <code>Permission denied</code> Solution: Verify SSH keys and user permissions</p> <p>Issue: <code>Host key verification failed</code> Solution: Add <code>host_key_checking = False</code> to ansible.cfg</p> <p>Issue: <code>Playbook not found</code> Solution: Check playbook directories in configuration</p>"},{"location":"user-guide/ansible/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable verbose output\npython pyestro.py --verbose 2 ansible module ping\n\n# Ansible debug mode\npython pyestro.py ansible playbook site.yml --vars ansible_verbosity=3\n</code></pre>"},{"location":"user-guide/ansible/#integration-with-reclass","title":"Integration with Reclass","text":"<p>Pyestro automatically integrates Ansible with reclass:</p> <ul> <li>Dynamic Inventory: Automatically generates inventory from reclass</li> <li>Host Variables: Reclass parameters become Ansible variables</li> <li>Group Variables: Class-based variable inheritance</li> <li>Facts Integration: Ansible facts can be stored in reclass</li> </ul>"},{"location":"user-guide/ansible/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/ansible/#playbook-organization","title":"Playbook Organization","text":"<ul> <li>Use role-based playbooks</li> <li>Implement proper tagging</li> <li>Use group_vars and host_vars appropriately</li> </ul>"},{"location":"user-guide/ansible/#variable-management","title":"Variable Management","text":"<ul> <li>Leverage reclass for complex variable hierarchies</li> <li>Use Ansible vault for sensitive data</li> <li>Implement consistent naming conventions</li> </ul>"},{"location":"user-guide/ansible/#testing","title":"Testing","text":"<ul> <li>Always use <code>--dry-run</code> for testing</li> <li>Test on staging environments first</li> <li>Use <code>--check</code> mode for validation</li> </ul> <p>For more information, see the Commands Guide.</p>"},{"location":"user-guide/commands/","title":"Commands","text":"<p>This guide covers all the commands available in Pyestro.</p>"},{"location":"user-guide/commands/#command-structure","title":"Command Structure","text":"<p>Pyestro uses a hierarchical command structure:</p> <pre><code>python pyestro.py [global-options] &lt;command&gt; [command-options] [arguments]\n</code></pre>"},{"location":"user-guide/commands/#global-options","title":"Global Options","text":"Option Description <code>--help, -h</code> Show help message <code>--version, -V</code> Show version information <code>--verbose, -v</code> Increase verbosity <code>--quiet, -q</code> Suppress output <code>--dry-run, -n</code> Preview operations without executing <code>--config, -c FILE</code> Use alternative configuration file"},{"location":"user-guide/commands/#main-commands","title":"Main Commands","text":""},{"location":"user-guide/commands/#setup-and-initialization","title":"Setup and Initialization","text":""},{"location":"user-guide/commands/#init","title":"<code>init</code>","text":"<p>Initialize a new Pyestro project.</p> <pre><code>python pyestro.py init [--force]\n</code></pre> <p>Creates: - <code>pyestro.json</code> configuration file - <code>workdir/</code> directory - <code>.gitignore</code> file</p> <p>Options: - <code>--force</code> - Overwrite existing files</p>"},{"location":"user-guide/commands/#setup","title":"<code>setup</code>","text":"<p>Setup project repositories and environment.</p> <pre><code>python pyestro.py setup [--dry-run]\n</code></pre> <p>Actions: - Clones configured repositories - Creates directory structure - Validates configuration</p>"},{"location":"user-guide/commands/#configuration-management","title":"Configuration Management","text":""},{"location":"user-guide/commands/#config-show","title":"<code>config show</code>","text":"<p>Display current configuration.</p> <pre><code>python pyestro.py config show [--format json|yaml]\n</code></pre>"},{"location":"user-guide/commands/#config-validate","title":"<code>config validate</code>","text":"<p>Validate configuration file.</p> <pre><code>python pyestro.py config validate [--strict]\n</code></pre>"},{"location":"user-guide/commands/#config-edit","title":"<code>config edit</code>","text":"<p>Edit configuration file.</p> <pre><code>python pyestro.py config edit [--editor EDITOR]\n</code></pre>"},{"location":"user-guide/commands/#node-management","title":"Node Management","text":""},{"location":"user-guide/commands/#nodes-list","title":"<code>nodes list</code>","text":"<p>List all available nodes.</p> <pre><code>python pyestro.py nodes list [--filter PATTERN] [--class CLASS] [--project PROJECT]\n</code></pre> <p>Examples: <pre><code># List all nodes\npython pyestro.py nodes list\n\n# Filter by pattern\npython pyestro.py nodes list --filter \"web*\"\n\n# Filter by class\npython pyestro.py nodes list --class webserver\n\n# Combine filters\npython pyestro.py nodes list --filter \"prod*\" --class database\n</code></pre></p>"},{"location":"user-guide/commands/#nodes-show","title":"<code>nodes show</code>","text":"<p>Show detailed information about a specific node.</p> <pre><code>python pyestro.py nodes show NODENAME [--format json|yaml|table]\n</code></pre> <p>Example: <pre><code>python pyestro.py nodes show web01.example.com\n</code></pre></p>"},{"location":"user-guide/commands/#class-management","title":"Class Management","text":""},{"location":"user-guide/commands/#classes-list","title":"<code>classes list</code>","text":"<p>List all available classes.</p> <pre><code>python pyestro.py classes list [--filter PATTERN]\n</code></pre>"},{"location":"user-guide/commands/#classes-show","title":"<code>classes show</code>","text":"<p>Show class details and which nodes use it.</p> <pre><code>python pyestro.py classes show CLASSNAME\n</code></pre>"},{"location":"user-guide/commands/#ansible-operations","title":"Ansible Operations","text":""},{"location":"user-guide/commands/#ansible-module","title":"<code>ansible module</code>","text":"<p>Execute an Ansible module.</p> <pre><code>python pyestro.py ansible module MODULE [--args ARGS] [--hosts PATTERN] [--vars KEY=VALUE]\n</code></pre> <p>Examples: <pre><code># Ping all hosts\npython pyestro.py ansible module ping\n\n# Run command on specific hosts\npython pyestro.py ansible module shell --args \"uptime\" --hosts \"web*\"\n\n# Setup module with variables\npython pyestro.py ansible module setup --hosts \"db01\" --vars gather_timeout=30\n</code></pre></p>"},{"location":"user-guide/commands/#ansible-playbook","title":"<code>ansible playbook</code>","text":"<p>Run an Ansible playbook.</p> <pre><code>python pyestro.py ansible playbook PLAYBOOK [--hosts PATTERN] [--vars KEY=VALUE] [--tags TAGS]\n</code></pre> <p>Examples: <pre><code># Run site playbook\npython pyestro.py ansible playbook site.yml\n\n# Run with specific hosts\npython pyestro.py ansible playbook deploy.yml --hosts \"production\"\n\n# Run specific tags\npython pyestro.py ansible playbook site.yml --tags \"nginx,ssl\"\n</code></pre></p>"},{"location":"user-guide/commands/#ansible-list-playbooks","title":"<code>ansible list-playbooks</code>","text":"<p>List available playbooks.</p> <pre><code>python pyestro.py ansible list-playbooks [--details]\n</code></pre>"},{"location":"user-guide/commands/#ansible-ping","title":"<code>ansible ping</code>","text":"<p>Test connectivity to managed hosts.</p> <pre><code>python pyestro.py ansible ping [--hosts PATTERN]\n</code></pre>"},{"location":"user-guide/commands/#ansible-galaxy-install","title":"<code>ansible galaxy-install</code>","text":"<p>Install Ansible Galaxy roles.</p> <pre><code>python pyestro.py ansible galaxy-install [--force] [--requirements FILE]\n</code></pre>"},{"location":"user-guide/commands/#search-operations","title":"Search Operations","text":""},{"location":"user-guide/commands/#search","title":"<code>search</code>","text":"<p>Search for parameters across the inventory.</p> <pre><code>python pyestro.py search PARAMETER_PATH [--format json|table]\n</code></pre> <p>Examples: <pre><code># Search for a parameter\npython pyestro.py search app:nginx:version\n\n# Search with wildcard\npython pyestro.py search \"*:ssl:*\"\n</code></pre></p>"},{"location":"user-guide/commands/#file-operations","title":"File Operations","text":""},{"location":"user-guide/commands/#merge","title":"<code>merge</code>","text":"<p>Merge files from storage to working directory.</p> <pre><code>python pyestro.py merge SOURCE DEST [--mode MODE] [--backup]\n</code></pre> <p>Modes: - <code>file</code> - Merge individual files - <code>dir</code> - Merge entire directories</p>"},{"location":"user-guide/commands/#sync","title":"<code>sync</code>","text":"<p>Synchronize files between directories.</p> <pre><code>python pyestro.py sync SOURCE DEST [--dry-run] [--delete]\n</code></pre>"},{"location":"user-guide/commands/#status-and-information","title":"Status and Information","text":""},{"location":"user-guide/commands/#status","title":"<code>status</code>","text":"<p>Show project status.</p> <pre><code>python pyestro.py status [--detailed]\n</code></pre> <p>Information shown: - Configuration status - Repository status - Inventory status - Connectivity status</p>"},{"location":"user-guide/commands/#repos-status","title":"<code>repos status</code>","text":"<p>Show repository status.</p> <pre><code>python pyestro.py repos status [--fetch]\n</code></pre>"},{"location":"user-guide/commands/#version","title":"<code>version</code>","text":"<p>Show version information.</p> <pre><code>python pyestro.py version [--detailed]\n</code></pre>"},{"location":"user-guide/commands/#migration","title":"Migration","text":""},{"location":"user-guide/commands/#migrate","title":"<code>migrate</code>","text":"<p>Migrate from bash Maestro configuration.</p> <pre><code>python pyestro.py migrate --from PATH [--to FILE] [--analyze-only]\n</code></pre> <p>Options: - <code>--from PATH</code> - Source .maestro file - <code>--to FILE</code> - Output configuration file - <code>--analyze-only</code> - Just analyze, don't convert</p>"},{"location":"user-guide/commands/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/commands/#combining-commands","title":"Combining Commands","text":"<p>Commands can be chained using shell operators:</p> <pre><code># Update repos and run playbook\npython pyestro.py repos update &amp;&amp; python pyestro.py ansible playbook site.yml\n\n# Check status before running\npython pyestro.py status &amp;&amp; python pyestro.py ansible ping\n</code></pre>"},{"location":"user-guide/commands/#using-filters","title":"Using Filters","text":"<p>Most commands support filtering:</p> <pre><code># Complex node filtering\npython pyestro.py nodes list --filter \"prod-web*\" --class \"webserver\" --project \"ecommerce\"\n\n# Filter hosts for Ansible\npython pyestro.py ansible module ping --hosts \"staging-*\"\n</code></pre>"},{"location":"user-guide/commands/#environment-variables","title":"Environment Variables","text":"<p>Override behavior with environment variables:</p> <pre><code># Force non-interactive mode\nPYESTRO_FORCE=true python pyestro.py setup\n\n# Set default dry-run\nPYESTRO_DRY_RUN=true python pyestro.py ansible playbook site.yml\n</code></pre>"},{"location":"user-guide/commands/#configuration-profiles","title":"Configuration Profiles","text":"<p>Use different configurations:</p> <pre><code># Production configuration\npython pyestro.py --config production.json status\n\n# Development configuration  \npython pyestro.py --config dev.json ansible ping\n</code></pre>"},{"location":"user-guide/commands/#common-workflows","title":"Common Workflows","text":""},{"location":"user-guide/commands/#daily-operations","title":"Daily Operations","text":"<pre><code># Morning check\npython pyestro.py status\npython pyestro.py repos status\npython pyestro.py ansible ping\n\n# Deploy changes\npython pyestro.py ansible playbook site.yml --dry-run\npython pyestro.py ansible playbook site.yml\n</code></pre>"},{"location":"user-guide/commands/#troubleshooting","title":"Troubleshooting","text":"<pre><code># Verbose output for debugging\npython pyestro.py --verbose 2 nodes show problematic-host\n\n# Test connectivity\npython pyestro.py ansible module ping --hosts problematic-host\n\n# Check specific service\npython pyestro.py ansible module service --args \"name=nginx state=started\" --hosts web-servers\n</code></pre>"},{"location":"user-guide/commands/#development-workflow","title":"Development Workflow","text":"<pre><code># Setup development environment\npython pyestro.py --config dev.json setup\n\n# Test changes\npython pyestro.py --config dev.json ansible playbook --tags testing dev.yml\n\n# Validate inventory\npython pyestro.py config validate\n</code></pre>"},{"location":"user-guide/commands/#next-steps","title":"Next Steps","text":"<ul> <li>Reclass Integration - Working with reclass</li> <li>Ansible Integration - Advanced Ansible usage</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"user-guide/reclass/","title":"Reclass Integration","text":"<p>Working with reclass in Pyestro.</p>"},{"location":"user-guide/reclass/#overview","title":"Overview","text":"<p>Pyestro uses reclass as its primary metadata backend, providing a powerful knowledge base for configuration management.</p>"},{"location":"user-guide/reclass/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/reclass/#listing-nodes","title":"Listing Nodes","text":"<pre><code># List all nodes\npython pyestro.py nodes list\n\n# Filter by pattern\npython pyestro.py nodes list --filter \"web*\"\n\n# Filter by class\npython pyestro.py nodes list --class webserver\n</code></pre>"},{"location":"user-guide/reclass/#node-information","title":"Node Information","text":"<pre><code># Show node details\npython pyestro.py nodes show web01.example.com\n\n# Show in different formats\npython pyestro.py nodes show web01.example.com --format json\npython pyestro.py nodes show web01.example.com --format yaml\n</code></pre>"},{"location":"user-guide/reclass/#class-management","title":"Class Management","text":"<pre><code># List all classes\npython pyestro.py classes list\n\n# Show class details\npython pyestro.py classes show webserver\n\n# Find nodes using a class\npython pyestro.py nodes list --class apache\n</code></pre>"},{"location":"user-guide/reclass/#searching-parameters","title":"Searching Parameters","text":"<pre><code># Search for specific parameters\npython pyestro.py search app:nginx:version\n\n# Search with wildcards\npython pyestro.py search \"*:ssl:*\"\n\n# Complex parameter paths\npython pyestro.py search host:network:interfaces:eth0:ip\n</code></pre>"},{"location":"user-guide/reclass/#reclass-structure","title":"Reclass Structure","text":"<p>Pyestro expects a standard reclass directory structure:</p> <pre><code>inventory/\n\u251c\u2500\u2500 classes/\n\u2502   \u251c\u2500\u2500 admin/\n\u2502   \u251c\u2500\u2500 location/\n\u2502   \u251c\u2500\u2500 project/\n\u2502   \u251c\u2500\u2500 role/\n\u2502   \u251c\u2500\u2500 service/\n\u2502   \u2514\u2500\u2500 app/\n\u2502       \u251c\u2500\u2500 apache/\n\u2502       \u251c\u2500\u2500 nginx/\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 nodes/\n    \u251c\u2500\u2500 project1/\n    \u2502   \u251c\u2500\u2500 web01.example.com.yml\n    \u2502   \u2514\u2500\u2500 db01.example.com.yml\n    \u2514\u2500\u2500 project2/\n        \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"user-guide/reclass/#configuration","title":"Configuration","text":"<p>Configure reclass in your <code>pyestro.json</code>:</p> <pre><code>{\n    \"inventory\": {\n        \"main\": \"./inventory\",\n        \"secondary\": \"./inventory2\"\n    }\n}\n</code></pre>"},{"location":"user-guide/reclass/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/reclass/#parameter-resolution","title":"Parameter Resolution","text":"<p>Pyestro resolves parameters through the reclass hierarchy, showing final merged values.</p>"},{"location":"user-guide/reclass/#class-inheritance","title":"Class Inheritance","text":"<p>View the complete class inheritance chain for any node.</p>"},{"location":"user-guide/reclass/#validation","title":"Validation","text":"<p>Built-in validation ensures your reclass inventory is syntactically correct.</p>"},{"location":"user-guide/reclass/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/reclass/#common-issues","title":"Common Issues","text":"<p>Issue: <code>reclass executable not found</code> Solution: Install reclass: <code>pip install reclass</code></p> <p>Issue: <code>Inventory directory does not exist</code> Solution: Check your inventory path in <code>pyestro.json</code></p> <p>Issue: <code>Failed to load inventory data</code> Solution: Validate your reclass syntax with <code>reclass --inventory</code></p> <p>For more information, see the Commands Guide.</p>"}]}